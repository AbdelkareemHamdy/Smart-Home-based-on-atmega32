
SmartHome_testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000026a  00800060  000035d8  0000366c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008002ca  008002ca  000038d6  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  000038d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b23  00000000  00000000  00006e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008983  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b767  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c514  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c901  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <main>
      8a:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ec       	ldi	r26, 0xC2	; 194
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ec       	ldi	r24, 0xC2	; 194
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP1_u8ReseveNameAndCheck>:
 * @brief the function receive the name throw USART,Put in buffer array and check it
 * @param[out] UserNamber :pointer to variable put the user number in this variable by uesing this pointer
 * @retval name state wither the name is correct or not
 */
APP_PassStaute_t APP1_u8ReseveNameAndCheck(u8 * UserNamber)
{
     b46:	1f 93       	push	r17
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	6f 97       	sbiw	r28, 0x1f	; 31
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	9f 8f       	std	Y+31, r25	; 0x1f
     b5e:	8e 8f       	std	Y+30, r24	; 0x1e
    APP_PassStaute_t Output=PASS_IS_CORRECT;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	8b 8b       	std	Y+19, r24	; 0x13
    u8 temp=0,i,j,NumOfLetters,NameArry[NUMBER_OF_NAME_LETTERS]={0,0,0,0,0,0,0,0,0,0};
     b64:	1a 8a       	std	Y+18, r1	; 0x12
     b66:	8a e0       	ldi	r24, 0x0A	; 10
     b68:	fe 01       	movw	r30, r28
     b6a:	74 96       	adiw	r30, 0x14	; 20
     b6c:	df 01       	movw	r26, r30
     b6e:	98 2f       	mov	r25, r24
     b70:	1d 92       	st	X+, r1
     b72:	9a 95       	dec	r25
     b74:	e9 f7       	brne	.-6      	; 0xb70 <APP1_u8ReseveNameAndCheck+0x2a>
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
     b76:	19 8a       	std	Y+17, r1	; 0x11
     b78:	13 c0       	rjmp	.+38     	; 0xba0 <APP1_u8ReseveNameAndCheck+0x5a>
    {
        temp=USART_u8Receive();
     b7a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
     b7e:	8a 8b       	std	Y+18, r24	; 0x12
        if (Blutooth_NULL_Char==temp)
     b80:	8a 89       	ldd	r24, Y+18	; 0x12
     b82:	8d 30       	cpi	r24, 0x0D	; 13
     b84:	81 f0       	breq	.+32     	; 0xba6 <APP1_u8ReseveNameAndCheck+0x60>
        {
            break;
        }
        NameArry[i]=temp;
     b86:	89 89       	ldd	r24, Y+17	; 0x11
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	ce 01       	movw	r24, r28
     b8e:	44 96       	adiw	r24, 0x14	; 20
     b90:	fc 01       	movw	r30, r24
     b92:	e2 0f       	add	r30, r18
     b94:	f3 1f       	adc	r31, r19
     b96:	8a 89       	ldd	r24, Y+18	; 0x12
     b98:	80 83       	st	Z, r24
APP_PassStaute_t APP1_u8ReseveNameAndCheck(u8 * UserNamber)
{
    APP_PassStaute_t Output=PASS_IS_CORRECT;
    u8 temp=0,i,j,NumOfLetters,NameArry[NUMBER_OF_NAME_LETTERS]={0,0,0,0,0,0,0,0,0,0};
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
     b9a:	89 89       	ldd	r24, Y+17	; 0x11
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	89 8b       	std	Y+17, r24	; 0x11
     ba0:	89 89       	ldd	r24, Y+17	; 0x11
     ba2:	8a 30       	cpi	r24, 0x0A	; 10
     ba4:	50 f3       	brcs	.-44     	; 0xb7a <APP1_u8ReseveNameAndCheck+0x34>
            break;
        }
        NameArry[i]=temp;
    }
    /*Check*/
    if (i<10)
     ba6:	89 89       	ldd	r24, Y+17	; 0x11
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	08 f0       	brcs	.+2      	; 0xbae <APP1_u8ReseveNameAndCheck+0x68>
     bac:	b7 c0       	rjmp	.+366    	; 0xd1c <APP1_u8ReseveNameAndCheck+0x1d6>
    {
        NumOfLetters = i;
     bae:	89 89       	ldd	r24, Y+17	; 0x11
     bb0:	8f 87       	std	Y+15, r24	; 0x0f
       for ( i = 0; i < MAX_NUMBER_OF_USERS; i++)
     bb2:	19 8a       	std	Y+17, r1	; 0x11
     bb4:	aa c0       	rjmp	.+340    	; 0xd0a <APP1_u8ReseveNameAndCheck+0x1c4>
       {
        for ( j = 0; j < NumOfLetters; j++)
     bb6:	18 8a       	std	Y+16, r1	; 0x10
     bb8:	97 c0       	rjmp	.+302    	; 0xce8 <APP1_u8ReseveNameAndCheck+0x1a2>
        {
            if (NameArry[j]!=eeprom_read_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+i*NUMBER_OF_NAME_LETTERS+j))
     bba:	88 89       	ldd	r24, Y+16	; 0x10
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	ce 01       	movw	r24, r28
     bc2:	44 96       	adiw	r24, 0x14	; 20
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	10 81       	ld	r17, Z
     bcc:	89 89       	ldd	r24, Y+17	; 0x11
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9c 01       	movw	r18, r24
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	c9 01       	movw	r24, r18
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	28 0f       	add	r18, r24
     be4:	39 1f       	adc	r19, r25
     be6:	88 89       	ldd	r24, Y+16	; 0x10
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	8c 59       	subi	r24, 0x9C	; 156
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__eerd_byte_m32>
     bf8:	18 17       	cp	r17, r24
     bfa:	09 f0       	breq	.+2      	; 0xbfe <APP1_u8ReseveNameAndCheck+0xb8>
     bfc:	7a c0       	rjmp	.+244    	; 0xcf2 <APP1_u8ReseveNameAndCheck+0x1ac>
            {
                /*error in user name*/
                break;
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	a0 e2       	ldi	r26, 0x20	; 32
     c04:	b1 e4       	ldi	r27, 0x41	; 65
     c06:	8b 87       	std	Y+11, r24	; 0x0b
     c08:	9c 87       	std	Y+12, r25	; 0x0c
     c0a:	ad 87       	std	Y+13, r26	; 0x0d
     c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	4a ef       	ldi	r20, 0xFA	; 250
     c1c:	54 e4       	ldi	r21, 0x44	; 68
     c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	8f 83       	std	Y+7, r24	; 0x07
     c28:	98 87       	std	Y+8, r25	; 0x08
     c2a:	a9 87       	std	Y+9, r26	; 0x09
     c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e8       	ldi	r20, 0x80	; 128
     c3c:	5f e3       	ldi	r21, 0x3F	; 63
     c3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c42:	88 23       	and	r24, r24
     c44:	2c f4       	brge	.+10     	; 0xc50 <APP1_u8ReseveNameAndCheck+0x10a>
		__ticks = 1;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	3f c0       	rjmp	.+126    	; 0xcce <APP1_u8ReseveNameAndCheck+0x188>
	else if (__tmp > 65535)
     c50:	6f 81       	ldd	r22, Y+7	; 0x07
     c52:	78 85       	ldd	r23, Y+8	; 0x08
     c54:	89 85       	ldd	r24, Y+9	; 0x09
     c56:	9a 85       	ldd	r25, Y+10	; 0x0a
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	3f ef       	ldi	r19, 0xFF	; 255
     c5c:	4f e7       	ldi	r20, 0x7F	; 127
     c5e:	57 e4       	ldi	r21, 0x47	; 71
     c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c64:	18 16       	cp	r1, r24
     c66:	4c f5       	brge	.+82     	; 0xcba <APP1_u8ReseveNameAndCheck+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c68:	6b 85       	ldd	r22, Y+11	; 0x0b
     c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e2       	ldi	r20, 0x20	; 32
     c76:	51 e4       	ldi	r21, 0x41	; 65
     c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 83       	std	Y+6, r25	; 0x06
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	0f c0       	rjmp	.+30     	; 0xcb0 <APP1_u8ReseveNameAndCheck+0x16a>
     c92:	88 ec       	ldi	r24, 0xC8	; 200
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <APP1_u8ReseveNameAndCheck+0x158>
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	69 f7       	brne	.-38     	; 0xc92 <APP1_u8ReseveNameAndCheck+0x14c>
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <APP1_u8ReseveNameAndCheck+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cba:	6f 81       	ldd	r22, Y+7	; 0x07
     cbc:	78 85       	ldd	r23, Y+8	; 0x08
     cbe:	89 85       	ldd	r24, Y+9	; 0x09
     cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <APP1_u8ReseveNameAndCheck+0x194>
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
    if (i<10)
    {
        NumOfLetters = i;
       for ( i = 0; i < MAX_NUMBER_OF_USERS; i++)
       {
        for ( j = 0; j < NumOfLetters; j++)
     ce2:	88 89       	ldd	r24, Y+16	; 0x10
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	88 8b       	std	Y+16, r24	; 0x10
     ce8:	98 89       	ldd	r25, Y+16	; 0x10
     cea:	8f 85       	ldd	r24, Y+15	; 0x0f
     cec:	98 17       	cp	r25, r24
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <APP1_u8ReseveNameAndCheck+0x1ac>
     cf0:	64 cf       	rjmp	.-312    	; 0xbba <APP1_u8ReseveNameAndCheck+0x74>
                /*error in user name*/
                break;
            }
            _delay_ms(10);
        }
        if (j==NumOfLetters)
     cf2:	98 89       	ldd	r25, Y+16	; 0x10
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	98 17       	cp	r25, r24
     cf8:	29 f4       	brne	.+10     	; 0xd04 <APP1_u8ReseveNameAndCheck+0x1be>
        {
            /*User name is found*/
            *UserNamber = i;
     cfa:	ee 8d       	ldd	r30, Y+30	; 0x1e
     cfc:	ff 8d       	ldd	r31, Y+31	; 0x1f
     cfe:	89 89       	ldd	r24, Y+17	; 0x11
     d00:	80 83       	st	Z, r24
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <APP1_u8ReseveNameAndCheck+0x1cc>
    }
    /*Check*/
    if (i<10)
    {
        NumOfLetters = i;
       for ( i = 0; i < MAX_NUMBER_OF_USERS; i++)
     d04:	89 89       	ldd	r24, Y+17	; 0x11
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	89 8b       	std	Y+17, r24	; 0x11
     d0a:	89 89       	ldd	r24, Y+17	; 0x11
     d0c:	8a 30       	cpi	r24, 0x0A	; 10
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <APP1_u8ReseveNameAndCheck+0x1cc>
     d10:	52 cf       	rjmp	.-348    	; 0xbb6 <APP1_u8ReseveNameAndCheck+0x70>
            /*User name is found*/
            *UserNamber = i;
            break;
        }
       }
       if (i==MAX_NUMBER_OF_USERS)
     d12:	89 89       	ldd	r24, Y+17	; 0x11
     d14:	8a 30       	cpi	r24, 0x0A	; 10
     d16:	19 f4       	brne	.+6      	; 0xd1e <APP1_u8ReseveNameAndCheck+0x1d8>
       {
        /*User name not found*/
        Output=PASS_IS_NOT_CORRECT;
     d18:	1b 8a       	std	Y+19, r1	; 0x13
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <APP1_u8ReseveNameAndCheck+0x1d8>
       }
       
    }
    else
    {
        Output=PASS_IS_NOT_CORRECT;
     d1c:	1b 8a       	std	Y+19, r1	; 0x13
    }
    return Output;
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
}
     d20:	6f 96       	adiw	r28, 0x1f	; 31
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	1f 91       	pop	r17
     d32:	08 95       	ret

00000d34 <APP_u8ReseveUserPasswordAndCheck>:
 * @brief the function receive the password throw USART,Put in buffer array and check it
 * @param[in] Copy_u8UserNumber :the number of the user
 * @retval Password state wither the password is correct or not
 */
APP_PassStaute_t APP_u8ReseveUserPasswordAndCheck(APP_userNumber_t Copy_u8UserNumber)
{
     d34:	1f 93       	push	r17
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	2f 97       	sbiw	r28, 0x0f	; 15
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	8f 87       	std	Y+15, r24	; 0x0f
    APP_PassStaute_t Output=PASS_IS_CORRECT;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	8c 83       	std	Y+4, r24	; 0x04
    u8 temp=0,i,NumOfLetters,NameArry[NUMBER_OF_PASS_LETTERS]={0,0,0,0,0,0,0,0,0,0};
     d50:	1b 82       	std	Y+3, r1	; 0x03
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	fe 01       	movw	r30, r28
     d56:	35 96       	adiw	r30, 0x05	; 5
     d58:	df 01       	movw	r26, r30
     d5a:	98 2f       	mov	r25, r24
     d5c:	1d 92       	st	X+, r1
     d5e:	9a 95       	dec	r25
     d60:	e9 f7       	brne	.-6      	; 0xd5c <APP_u8ReseveUserPasswordAndCheck+0x28>
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     d62:	1a 82       	std	Y+2, r1	; 0x02
     d64:	13 c0       	rjmp	.+38     	; 0xd8c <APP_u8ReseveUserPasswordAndCheck+0x58>
    {
        temp=USART_u8Receive();
     d66:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
     d6a:	8b 83       	std	Y+3, r24	; 0x03
        if (Blutooth_NULL_Char==temp)
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	8d 30       	cpi	r24, 0x0D	; 13
     d70:	81 f0       	breq	.+32     	; 0xd92 <APP_u8ReseveUserPasswordAndCheck+0x5e>
        {
            break;
        }
        NameArry[i]=temp;
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	ce 01       	movw	r24, r28
     d7a:	05 96       	adiw	r24, 0x05	; 5
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	80 83       	st	Z, r24
APP_PassStaute_t APP_u8ReseveUserPasswordAndCheck(APP_userNumber_t Copy_u8UserNumber)
{
    APP_PassStaute_t Output=PASS_IS_CORRECT;
    u8 temp=0,i,NumOfLetters,NameArry[NUMBER_OF_PASS_LETTERS]={0,0,0,0,0,0,0,0,0,0};
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	8a 83       	std	Y+2, r24	; 0x02
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	8a 30       	cpi	r24, 0x0A	; 10
     d90:	50 f3       	brcs	.-44     	; 0xd66 <APP_u8ReseveUserPasswordAndCheck+0x32>
            break;
        }
        NameArry[i]=temp;
    }
    /*Check*/
    if (i<10)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	8a 30       	cpi	r24, 0x0A	; 10
     d96:	98 f5       	brcc	.+102    	; 0xdfe <APP_u8ReseveUserPasswordAndCheck+0xca>
    {
        NumOfLetters = i;
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
        for ( i = 0; i < NumOfLetters; i++)
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	22 c0       	rjmp	.+68     	; 0xde4 <APP_u8ReseveUserPasswordAndCheck+0xb0>
        {
            if (NameArry[i]!=eeprom_read_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i))
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	ce 01       	movw	r24, r28
     da8:	05 96       	adiw	r24, 0x05	; 5
     daa:	fc 01       	movw	r30, r24
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	10 81       	ld	r17, Z
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	48 2f       	mov	r20, r24
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 01       	movw	r18, r24
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	c9 01       	movw	r24, r18
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	84 0f       	add	r24, r20
     dd4:	95 1f       	adc	r25, r21
     dd6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__eerd_byte_m32>
     dda:	18 17       	cp	r17, r24
     ddc:	39 f4       	brne	.+14     	; 0xdec <APP_u8ReseveUserPasswordAndCheck+0xb8>
    }
    /*Check*/
    if (i<10)
    {
        NumOfLetters = i;
        for ( i = 0; i < NumOfLetters; i++)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	8a 83       	std	Y+2, r24	; 0x02
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	98 17       	cp	r25, r24
     dea:	d0 f2       	brcs	.-76     	; 0xda0 <APP_u8ReseveUserPasswordAndCheck+0x6c>
            {
                /*error in user name*/
                break;
            }
        }
        if (i==NumOfLetters)
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	98 17       	cp	r25, r24
     df2:	19 f4       	brne	.+6      	; 0xdfa <APP_u8ReseveUserPasswordAndCheck+0xc6>
        {
            /*User name is found*/
            Output=PASS_IS_CORRECT;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	8c 83       	std	Y+4, r24	; 0x04
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <APP_u8ReseveUserPasswordAndCheck+0xcc>
        }
        else
        {
            /*User name not found*/
            Output=PASS_IS_NOT_CORRECT;
     dfa:	1c 82       	std	Y+4, r1	; 0x04
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <APP_u8ReseveUserPasswordAndCheck+0xcc>
        }
       
    }
    else
    {
        Output=PASS_IS_NOT_CORRECT;
     dfe:	1c 82       	std	Y+4, r1	; 0x04
    }
    return Output;
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
}
     e02:	2f 96       	adiw	r28, 0x0f	; 15
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret

00000e16 <APP_voidReseveUserNameAndWrite>:
 * @brief the function receive the new name throw USART and Put in buffer array the store in EEPROM
 * @param[in] Copy_u8UserNumber :the number of the user
 * @retval No return value
 */
void APP_voidReseveUserNameAndWrite(APP_userNumber_t Copy_u8UserNumber)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <APP_voidReseveUserNameAndWrite+0x6>
     e1c:	0f 92       	push	r0
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	8b 83       	std	Y+3, r24	; 0x03
    u8 temp=0,i;
     e24:	1a 82       	std	Y+2, r1	; 0x02
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	20 c0       	rjmp	.+64     	; 0xe6a <APP_voidReseveUserNameAndWrite+0x54>
    {
        temp=USART_u8Receive();
     e2a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
     e2e:	8a 83       	std	Y+2, r24	; 0x02
        if (Blutooth_NULL_Char==temp)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	8d 30       	cpi	r24, 0x0D	; 13
     e34:	c1 f1       	breq	.+112    	; 0xea6 <APP_voidReseveUserNameAndWrite+0x90>
        {
            break;
        }
        eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9c 01       	movw	r18, r24
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	c9 01       	movw	r24, r18
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	28 0f       	add	r18, r24
     e4e:	39 1f       	adc	r19, r25
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	8c 59       	subi	r24, 0x9C	; 156
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	6a 81       	ldd	r22, Y+2	; 0x02
     e60:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
 */
void APP_voidReseveUserNameAndWrite(APP_userNumber_t Copy_u8UserNumber)
{
    u8 temp=0,i;
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	89 83       	std	Y+1, r24	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8a 30       	cpi	r24, 0x0A	; 10
     e6e:	e8 f2       	brcs	.-70     	; 0xe2a <APP_voidReseveUserNameAndWrite+0x14>
     e70:	1a c0       	rjmp	.+52     	; 0xea6 <APP_voidReseveUserNameAndWrite+0x90>
        }
        eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
    }
    for ( ; i < NUMBER_OF_NAME_LETTERS; i++)
    {
        eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,0);
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9c 01       	movw	r18, r24
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	c9 01       	movw	r24, r18
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	28 0f       	add	r18, r24
     e8a:	39 1f       	adc	r19, r25
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	8c 59       	subi	r24, 0x9C	; 156
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
        {
            break;
        }
        eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
    }
    for ( ; i < NUMBER_OF_NAME_LETTERS; i++)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	8a 30       	cpi	r24, 0x0A	; 10
     eaa:	18 f3       	brcs	.-58     	; 0xe72 <APP_voidReseveUserNameAndWrite+0x5c>
    {
        eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,0);
    }
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <APP_voidReseverUserPassAndWrite>:
 * @brief the function receive the new password throw USART and Put in buffer array the store in EEPROM
 * @param[in] Copy_u8UserNumber :the number of the user
 * @retval No return value
 */
void APP_voidReseverUserPassAndWrite(APP_userNumber_t Copy_u8UserNumber)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <APP_voidReseverUserPassAndWrite+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	8b 83       	std	Y+3, r24	; 0x03
    u8 temp=0,i;
     ec6:	1a 82       	std	Y+2, r1	; 0x02
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     ec8:	19 82       	std	Y+1, r1	; 0x01
     eca:	1e c0       	rjmp	.+60     	; 0xf08 <APP_voidReseverUserPassAndWrite+0x50>
    {
        temp=USART_u8Receive();
     ecc:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
     ed0:	8a 83       	std	Y+2, r24	; 0x02
        if (Blutooth_NULL_Char==temp)
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	8d 30       	cpi	r24, 0x0D	; 13
     ed6:	a1 f1       	breq	.+104    	; 0xf40 <APP_voidReseverUserPassAndWrite+0x88>
        {
            break;
        }
        eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	48 2f       	mov	r20, r24
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 01       	movw	r18, r24
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	c9 01       	movw	r24, r18
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	82 0f       	add	r24, r18
     ef6:	93 1f       	adc	r25, r19
     ef8:	84 0f       	add	r24, r20
     efa:	95 1f       	adc	r25, r21
     efc:	6a 81       	ldd	r22, Y+2	; 0x02
     efe:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
 */
void APP_voidReseverUserPassAndWrite(APP_userNumber_t Copy_u8UserNumber)
{
    u8 temp=0,i;
    /*Resef Name*/
    for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	8a 30       	cpi	r24, 0x0A	; 10
     f0c:	f8 f2       	brcs	.-66     	; 0xecc <APP_voidReseverUserPassAndWrite+0x14>
     f0e:	18 c0       	rjmp	.+48     	; 0xf40 <APP_voidReseverUserPassAndWrite+0x88>
        }
        eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
    }
    for ( ; i < NUMBER_OF_PASS_LETTERS; i++)
    {
        eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,0);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 01       	movw	r18, r24
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	84 0f       	add	r24, r20
     f32:	95 1f       	adc	r25, r21
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
        {
            break;
        }
        eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
    }
    for ( ; i < NUMBER_OF_PASS_LETTERS; i++)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	8a 30       	cpi	r24, 0x0A	; 10
     f44:	28 f3       	brcs	.-54     	; 0xf10 <APP_voidReseverUserPassAndWrite+0x58>
    {
        eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,0);
    }
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <APP_voidAllPassesInit>:
 * @fn APP_voidAllPassesInit
 * @brief the function store in the initialization passwords EEPROM
 * @retval No return value
 */
void APP_voidAllPassesInit(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	2d 97       	sbiw	r28, 0x0d	; 13
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
    u8 temp,i,Copy_u8UserNumber,Arry[5]="1234";
     f66:	ce 01       	movw	r24, r28
     f68:	04 96       	adiw	r24, 0x04	; 4
     f6a:	9a 87       	std	Y+10, r25	; 0x0a
     f6c:	89 87       	std	Y+9, r24	; 0x09
     f6e:	e0 e6       	ldi	r30, 0x60	; 96
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	fc 87       	std	Y+12, r31	; 0x0c
     f74:	eb 87       	std	Y+11, r30	; 0x0b
     f76:	f5 e0       	ldi	r31, 0x05	; 5
     f78:	fd 87       	std	Y+13, r31	; 0x0d
     f7a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f7c:	fc 85       	ldd	r31, Y+12	; 0x0c
     f7e:	00 80       	ld	r0, Z
     f80:	8b 85       	ldd	r24, Y+11	; 0x0b
     f82:	9c 85       	ldd	r25, Y+12	; 0x0c
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9c 87       	std	Y+12, r25	; 0x0c
     f88:	8b 87       	std	Y+11, r24	; 0x0b
     f8a:	e9 85       	ldd	r30, Y+9	; 0x09
     f8c:	fa 85       	ldd	r31, Y+10	; 0x0a
     f8e:	00 82       	st	Z, r0
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	9a 87       	std	Y+10, r25	; 0x0a
     f98:	89 87       	std	Y+9, r24	; 0x09
     f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f9c:	91 50       	subi	r25, 0x01	; 1
     f9e:	9d 87       	std	Y+13, r25	; 0x0d
     fa0:	ed 85       	ldd	r30, Y+13	; 0x0d
     fa2:	ee 23       	and	r30, r30
     fa4:	51 f7       	brne	.-44     	; 0xf7a <APP_voidAllPassesInit+0x28>
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	49 c0       	rjmp	.+146    	; 0x103c <APP_voidAllPassesInit+0xea>
    {
        for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     faa:	1a 82       	std	Y+2, r1	; 0x02
     fac:	25 c0       	rjmp	.+74     	; 0xff8 <APP_voidAllPassesInit+0xa6>
        {
            temp=Arry[i];
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	ce 01       	movw	r24, r28
     fb6:	04 96       	adiw	r24, 0x04	; 4
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	8b 83       	std	Y+3, r24	; 0x03
            if ('\0'==temp)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 23       	and	r24, r24
     fc6:	a1 f1       	breq	.+104    	; 0x1030 <APP_voidAllPassesInit+0xde>
            {
                break;
            }
            eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	48 2f       	mov	r20, r24
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 01       	movw	r18, r24
     fd6:	22 0f       	add	r18, r18
     fd8:	33 1f       	adc	r19, r19
     fda:	c9 01       	movw	r24, r18
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	84 0f       	add	r24, r20
     fea:	95 1f       	adc	r25, r21
     fec:	6b 81       	ldd	r22, Y+3	; 0x03
     fee:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
{
    u8 temp,i,Copy_u8UserNumber,Arry[5]="1234";
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
    {
        for ( i = 0; i < NUMBER_OF_PASS_LETTERS; i++)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	8a 30       	cpi	r24, 0x0A	; 10
     ffc:	c0 f2       	brcs	.-80     	; 0xfae <APP_voidAllPassesInit+0x5c>
     ffe:	18 c0       	rjmp	.+48     	; 0x1030 <APP_voidAllPassesInit+0xde>
            }
            eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
        }
        for ( ; i < NUMBER_OF_PASS_LETTERS; i++)
        {
            eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,0);
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	48 2f       	mov	r20, r24
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 01       	movw	r18, r24
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	c9 01       	movw	r24, r18
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	84 0f       	add	r24, r20
    1022:	95 1f       	adc	r25, r21
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
            {
                break;
            }
            eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,temp);
        }
        for ( ; i < NUMBER_OF_PASS_LETTERS; i++)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	8a 30       	cpi	r24, 0x0A	; 10
    1034:	28 f3       	brcs	.-54     	; 0x1000 <APP_voidAllPassesInit+0xae>
 */
void APP_voidAllPassesInit(void)
{
    u8 temp,i,Copy_u8UserNumber,Arry[5]="1234";
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	8a 30       	cpi	r24, 0x0A	; 10
    1040:	08 f4       	brcc	.+2      	; 0x1044 <APP_voidAllPassesInit+0xf2>
    1042:	b3 cf       	rjmp	.-154    	; 0xfaa <APP_voidAllPassesInit+0x58>
        for ( ; i < NUMBER_OF_PASS_LETTERS; i++)
        {
            eeprom_write_byte((u8*)STATIC_PASS_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_PASS_LETTERS+i,0);
        }
    }
}
    1044:	2d 96       	adiw	r28, 0x0d	; 13
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <APP_voidAllUserNamesInit>:
 * @fn APP_voidAllUserNamesInit
 * @brief the function store in the initialization user names EEPROM
 * @retval No return value
 */
void APP_voidAllUserNamesInit(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	2d 97       	sbiw	r28, 0x0d	; 13
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    u8 temp,i,Copy_u8UserNumber,Arry[5]="user";
    106a:	ce 01       	movw	r24, r28
    106c:	04 96       	adiw	r24, 0x04	; 4
    106e:	9a 87       	std	Y+10, r25	; 0x0a
    1070:	89 87       	std	Y+9, r24	; 0x09
    1072:	e5 e6       	ldi	r30, 0x65	; 101
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	fc 87       	std	Y+12, r31	; 0x0c
    1078:	eb 87       	std	Y+11, r30	; 0x0b
    107a:	f5 e0       	ldi	r31, 0x05	; 5
    107c:	fd 87       	std	Y+13, r31	; 0x0d
    107e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1080:	fc 85       	ldd	r31, Y+12	; 0x0c
    1082:	00 80       	ld	r0, Z
    1084:	8b 85       	ldd	r24, Y+11	; 0x0b
    1086:	9c 85       	ldd	r25, Y+12	; 0x0c
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	9c 87       	std	Y+12, r25	; 0x0c
    108c:	8b 87       	std	Y+11, r24	; 0x0b
    108e:	e9 85       	ldd	r30, Y+9	; 0x09
    1090:	fa 85       	ldd	r31, Y+10	; 0x0a
    1092:	00 82       	st	Z, r0
    1094:	89 85       	ldd	r24, Y+9	; 0x09
    1096:	9a 85       	ldd	r25, Y+10	; 0x0a
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9a 87       	std	Y+10, r25	; 0x0a
    109c:	89 87       	std	Y+9, r24	; 0x09
    109e:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	9d 87       	std	Y+13, r25	; 0x0d
    10a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    10a6:	ee 23       	and	r30, r30
    10a8:	51 f7       	brne	.-44     	; 0x107e <APP_voidAllUserNamesInit+0x28>
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
    10aa:	19 82       	std	Y+1, r1	; 0x01
    10ac:	4d c0       	rjmp	.+154    	; 0x1148 <APP_voidAllUserNamesInit+0xf2>
    {
        for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
    10ae:	1a 82       	std	Y+2, r1	; 0x02
    10b0:	27 c0       	rjmp	.+78     	; 0x1100 <APP_voidAllUserNamesInit+0xaa>
        {
            temp=Arry[i];
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	ce 01       	movw	r24, r28
    10ba:	04 96       	adiw	r24, 0x04	; 4
    10bc:	fc 01       	movw	r30, r24
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	80 81       	ld	r24, Z
    10c4:	8b 83       	std	Y+3, r24	; 0x03
            if ('\0'==temp)
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 23       	and	r24, r24
    10ca:	c1 f1       	breq	.+112    	; 0x113c <APP_voidAllUserNamesInit+0xe6>
            {
                break;
            }
            eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 01       	movw	r18, r24
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	c9 01       	movw	r24, r18
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	28 0f       	add	r18, r24
    10e4:	39 1f       	adc	r19, r25
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	8c 59       	subi	r24, 0x9C	; 156
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	6b 81       	ldd	r22, Y+3	; 0x03
    10f6:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
{
    u8 temp,i,Copy_u8UserNumber,Arry[5]="user";
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
    {
        for ( i = 0; i < NUMBER_OF_NAME_LETTERS; i++)
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	8a 30       	cpi	r24, 0x0A	; 10
    1104:	b0 f2       	brcs	.-84     	; 0x10b2 <APP_voidAllUserNamesInit+0x5c>
    1106:	1a c0       	rjmp	.+52     	; 0x113c <APP_voidAllUserNamesInit+0xe6>
            }
            eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
        }
        for ( ; i < NUMBER_OF_NAME_LETTERS; i++)
        {
            eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,0);
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9c 01       	movw	r18, r24
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	c9 01       	movw	r24, r18
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	28 0f       	add	r18, r24
    1120:	39 1f       	adc	r19, r25
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	8c 59       	subi	r24, 0x9C	; 156
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
            {
                break;
            }
            eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,temp);
        }
        for ( ; i < NUMBER_OF_NAME_LETTERS; i++)
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	8a 83       	std	Y+2, r24	; 0x02
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	8a 30       	cpi	r24, 0x0A	; 10
    1140:	18 f3       	brcs	.-58     	; 0x1108 <APP_voidAllUserNamesInit+0xb2>
 */
void APP_voidAllUserNamesInit(void)
{
    u8 temp,i,Copy_u8UserNumber,Arry[5]="user";
    /*Resef Name*/
    for (Copy_u8UserNumber = 0; Copy_u8UserNumber < 10; Copy_u8UserNumber++)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	8a 30       	cpi	r24, 0x0A	; 10
    114c:	08 f4       	brcc	.+2      	; 0x1150 <APP_voidAllUserNamesInit+0xfa>
    114e:	af cf       	rjmp	.-162    	; 0x10ae <APP_voidAllUserNamesInit+0x58>
        for ( ; i < NUMBER_OF_NAME_LETTERS; i++)
        {
            eeprom_write_byte((u8*)STATIC_NAME_ADDRESSES_OFFSET+Copy_u8UserNumber*NUMBER_OF_NAME_LETTERS+i,0);
        }
    }
}
    1150:	2d 96       	adiw	r28, 0x0d	; 13
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <DIO_VoidSetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_private.h"


void DIO_VoidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin, u8 Copy_u8PinDiriction)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	27 97       	sbiw	r28, 0x07	; 7
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
    117a:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <= DIO_u8PIN7)
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	08 f0       	brcs	.+2      	; 0x1184 <DIO_VoidSetPinDirection+0x22>
    1182:	ea c0       	rjmp	.+468    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDiriction == DIO_u8PIN_INPUT)
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <DIO_VoidSetPinDirection+0x2a>
    118a:	74 c0       	rjmp	.+232    	; 0x1274 <DIO_VoidSetPinDirection+0x112>
		{
			switch(Copy_u8Port)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3f 83       	std	Y+7, r19	; 0x07
    1194:	2e 83       	std	Y+6, r18	; 0x06
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	59 f1       	breq	.+86     	; 0x11f6 <DIO_VoidSetPinDirection+0x94>
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <DIO_VoidSetPinDirection+0x52>
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f0       	breq	.+26     	; 0x11cc <DIO_VoidSetPinDirection+0x6a>
    11b2:	d2 c0       	rjmp	.+420    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
    11b4:	2e 81       	ldd	r18, Y+6	; 0x06
    11b6:	3f 81       	ldd	r19, Y+7	; 0x07
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	89 f1       	breq	.+98     	; 0x1220 <DIO_VoidSetPinDirection+0xbe>
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_VoidSetPinDirection+0x68>
    11c8:	40 c0       	rjmp	.+128    	; 0x124a <DIO_VoidSetPinDirection+0xe8>
    11ca:	c6 c0       	rjmp	.+396    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			{
			case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_VoidSetPinDirection+0x88>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_VoidSetPinDirection+0x84>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	b1 c0       	rjmp	.+354    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    11f6:	a7 e3       	ldi	r26, 0x37	; 55
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e7 e3       	ldi	r30, 0x37	; 55
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_VoidSetPinDirection+0xb2>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_VoidSetPinDirection+0xae>
    1218:	80 95       	com	r24
    121a:	84 23       	and	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	9c c0       	rjmp	.+312    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    1220:	a4 e3       	ldi	r26, 0x34	; 52
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_VoidSetPinDirection+0xdc>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_VoidSetPinDirection+0xd8>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	87 c0       	rjmp	.+270    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_VoidSetPinDirection+0x106>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_VoidSetPinDirection+0x102>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	72 c0       	rjmp	.+228    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			}
		}
		else if(Copy_u8PinDiriction == DIO_u8PIN_OUTPUT)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_VoidSetPinDirection+0x11a>
    127a:	6e c0       	rjmp	.+220    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
		{
			switch(Copy_u8Port)
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	49 f1       	breq	.+82     	; 0x12e2 <DIO_VoidSetPinDirection+0x180>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <DIO_VoidSetPinDirection+0x142>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	61 f0       	breq	.+24     	; 0x12ba <DIO_VoidSetPinDirection+0x158>
    12a2:	5a c0       	rjmp	.+180    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	3d 81       	ldd	r19, Y+5	; 0x05
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	71 f1       	breq	.+92     	; 0x130a <DIO_VoidSetPinDirection+0x1a8>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	e9 f1       	breq	.+122    	; 0x1332 <DIO_VoidSetPinDirection+0x1d0>
    12b8:	4f c0       	rjmp	.+158    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			{
			case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    12ba:	aa e3       	ldi	r26, 0x3A	; 58
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_VoidSetPinDirection+0x176>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_VoidSetPinDirection+0x172>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	3b c0       	rjmp	.+118    	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    12e2:	a7 e3       	ldi	r26, 0x37	; 55
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e7 e3       	ldi	r30, 0x37	; 55
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_VoidSetPinDirection+0x19e>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_VoidSetPinDirection+0x19a>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	27 c0       	rjmp	.+78     	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    130a:	a4 e3       	ldi	r26, 0x34	; 52
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e4 e3       	ldi	r30, 0x34	; 52
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_VoidSetPinDirection+0x1c6>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_VoidSetPinDirection+0x1c2>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <DIO_VoidSetPinDirection+0x1f6>
			case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    1332:	a1 e3       	ldi	r26, 0x31	; 49
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e1 e3       	ldi	r30, 0x31	; 49
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_VoidSetPinDirection+0x1ee>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_VoidSetPinDirection+0x1ea>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
			}
		}
	}
}
    1358:	27 96       	adiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <DIO_VoidSetPortDirection>:
void DIO_VoidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8PortDirection)
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_VoidSetPortDirection+0x6>
    1370:	00 d0       	rcall	.+0      	; 0x1372 <DIO_VoidSetPortDirection+0x8>
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3c 83       	std	Y+4, r19	; 0x04
    1382:	2b 83       	std	Y+3, r18	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	d1 f0       	breq	.+52     	; 0x13c2 <DIO_VoidSetPortDirection+0x58>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	3c 81       	ldd	r19, Y+4	; 0x04
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	2c f4       	brge	.+10     	; 0x13a2 <DIO_VoidSetPortDirection+0x38>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	61 f0       	breq	.+24     	; 0x13b8 <DIO_VoidSetPortDirection+0x4e>
    13a0:	1e c0       	rjmp	.+60     	; 0x13de <DIO_VoidSetPortDirection+0x74>
    13a2:	2b 81       	ldd	r18, Y+3	; 0x03
    13a4:	3c 81       	ldd	r19, Y+4	; 0x04
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <DIO_VoidSetPortDirection+0x62>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	81 f0       	breq	.+32     	; 0x13d6 <DIO_VoidSetPortDirection+0x6c>
    13b6:	13 c0       	rjmp	.+38     	; 0x13de <DIO_VoidSetPortDirection+0x74>
	{
	case DIO_u8PORTA : DDRA = Copy_u8PortDirection;break;
    13b8:	ea e3       	ldi	r30, 0x3A	; 58
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	80 83       	st	Z, r24
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <DIO_VoidSetPortDirection+0x74>
	case DIO_u8PORTB : DDRB = Copy_u8PortDirection;break;
    13c2:	e7 e3       	ldi	r30, 0x37	; 55
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	80 83       	st	Z, r24
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <DIO_VoidSetPortDirection+0x74>
	case DIO_u8PORTC : DDRC = Copy_u8PortDirection;break;
    13cc:	e4 e3       	ldi	r30, 0x34	; 52
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 83       	st	Z, r24
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <DIO_VoidSetPortDirection+0x74>
	case DIO_u8PORTD : DDRD = Copy_u8PortDirection;break;
    13d6:	e1 e3       	ldi	r30, 0x31	; 49
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
	}
}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_VoidSetPinValue>:

void DIO_VoidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PinValue)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	27 97       	sbiw	r28, 0x07	; 7
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	6a 83       	std	Y+2, r22	; 0x02
    1404:	4b 83       	std	Y+3, r20	; 0x03
	if( Copy_u8Pin <= DIO_u8PIN7)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	08 f0       	brcs	.+2      	; 0x140e <DIO_VoidSetPinValue+0x22>
    140c:	ea c0       	rjmp	.+468    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue == DIO_u8PIN_LOW)
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	88 23       	and	r24, r24
    1412:	09 f0       	breq	.+2      	; 0x1416 <DIO_VoidSetPinValue+0x2a>
    1414:	74 c0       	rjmp	.+232    	; 0x14fe <DIO_VoidSetPinValue+0x112>
		{
			switch(Copy_u8Port)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3f 83       	std	Y+7, r19	; 0x07
    141e:	2e 83       	std	Y+6, r18	; 0x06
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	59 f1       	breq	.+86     	; 0x1480 <DIO_VoidSetPinValue+0x94>
    142a:	2e 81       	ldd	r18, Y+6	; 0x06
    142c:	3f 81       	ldd	r19, Y+7	; 0x07
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <DIO_VoidSetPinValue+0x52>
    1434:	8e 81       	ldd	r24, Y+6	; 0x06
    1436:	9f 81       	ldd	r25, Y+7	; 0x07
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	69 f0       	breq	.+26     	; 0x1456 <DIO_VoidSetPinValue+0x6a>
    143c:	d2 c0       	rjmp	.+420    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
    143e:	2e 81       	ldd	r18, Y+6	; 0x06
    1440:	3f 81       	ldd	r19, Y+7	; 0x07
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	89 f1       	breq	.+98     	; 0x14aa <DIO_VoidSetPinValue+0xbe>
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <DIO_VoidSetPinValue+0x68>
    1452:	40 c0       	rjmp	.+128    	; 0x14d4 <DIO_VoidSetPinValue+0xe8>
    1454:	c6 c0       	rjmp	.+396    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			{
			case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_VoidSetPinValue+0x88>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_VoidSetPinValue+0x84>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	b1 c0       	rjmp	.+354    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_VoidSetPinValue+0xb2>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_VoidSetPinValue+0xae>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	9c c0       	rjmp	.+312    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_VoidSetPinValue+0xdc>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_VoidSetPinValue+0xd8>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	87 c0       	rjmp	.+270    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    14d4:	a2 e3       	ldi	r26, 0x32	; 50
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e2 e3       	ldi	r30, 0x32	; 50
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_VoidSetPinValue+0x106>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_VoidSetPinValue+0x102>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	72 c0       	rjmp	.+228    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			}
		}
		else if(Copy_u8PinValue == DIO_u8PIN_HIGH)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	09 f0       	breq	.+2      	; 0x1506 <DIO_VoidSetPinValue+0x11a>
    1504:	6e c0       	rjmp	.+220    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
		{
			switch(Copy_u8Port)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	49 f1       	breq	.+82     	; 0x156c <DIO_VoidSetPinValue+0x180>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <DIO_VoidSetPinValue+0x142>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <DIO_VoidSetPinValue+0x158>
    152c:	5a c0       	rjmp	.+180    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	71 f1       	breq	.+92     	; 0x1594 <DIO_VoidSetPinValue+0x1a8>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	e9 f1       	breq	.+122    	; 0x15bc <DIO_VoidSetPinValue+0x1d0>
    1542:	4f c0       	rjmp	.+158    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			{
			case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1544:	ab e3       	ldi	r26, 0x3B	; 59
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	eb e3       	ldi	r30, 0x3B	; 59
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_VoidSetPinValue+0x176>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_VoidSetPinValue+0x172>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	3b c0       	rjmp	.+118    	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    156c:	a8 e3       	ldi	r26, 0x38	; 56
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e8 e3       	ldi	r30, 0x38	; 56
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_VoidSetPinValue+0x19e>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_VoidSetPinValue+0x19a>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	27 c0       	rjmp	.+78     	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    1594:	a5 e3       	ldi	r26, 0x35	; 53
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e3       	ldi	r30, 0x35	; 53
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_VoidSetPinValue+0x1c6>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_VoidSetPinValue+0x1c2>
    15b6:	84 2b       	or	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <DIO_VoidSetPinValue+0x1f6>
			case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    15bc:	a2 e3       	ldi	r26, 0x32	; 50
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e2 e3       	ldi	r30, 0x32	; 50
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_VoidSetPinValue+0x1ee>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_VoidSetPinValue+0x1ea>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
			}
		}
	}
}
    15e2:	27 96       	adiw	r28, 0x07	; 7
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <DIO_VoidSetPortValue>:


void DIO_VoidSetPortValue( u8 Copy_u8Port , u8 Copy_u8PortValue)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <DIO_VoidSetPortValue+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <DIO_VoidSetPortValue+0x8>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3c 83       	std	Y+4, r19	; 0x04
    160c:	2b 83       	std	Y+3, r18	; 0x03
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	d1 f0       	breq	.+52     	; 0x164c <DIO_VoidSetPortValue+0x58>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <DIO_VoidSetPortValue+0x38>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	61 f0       	breq	.+24     	; 0x1642 <DIO_VoidSetPortValue+0x4e>
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <DIO_VoidSetPortValue+0x74>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <DIO_VoidSetPortValue+0x62>
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	81 f0       	breq	.+32     	; 0x1660 <DIO_VoidSetPortValue+0x6c>
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <DIO_VoidSetPortValue+0x74>
	{
	case DIO_u8PORTA : PORTA = Copy_u8PortValue; break;
    1642:	eb e3       	ldi	r30, 0x3B	; 59
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	80 83       	st	Z, r24
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <DIO_VoidSetPortValue+0x74>
	case DIO_u8PORTB : PORTB = Copy_u8PortValue; break;
    164c:	e8 e3       	ldi	r30, 0x38	; 56
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	80 83       	st	Z, r24
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <DIO_VoidSetPortValue+0x74>
	case DIO_u8PORTC : PORTC = Copy_u8PortValue; break;
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	80 83       	st	Z, r24
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <DIO_VoidSetPortValue+0x74>
	case DIO_u8PORTD : PORTD = Copy_u8PortValue; break;
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_u8GetPinValue+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_u8GetPinValue+0x8>
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinVal=NULL;
    1688:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	4c 81       	ldd	r20, Y+4	; 0x04
    1696:	5d 81       	ldd	r21, Y+5	; 0x05
    1698:	41 30       	cpi	r20, 0x01	; 1
    169a:	51 05       	cpc	r21, r1
    169c:	41 f1       	breq	.+80     	; 0x16ee <DIO_u8GetPinValue+0x78>
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	9d 81       	ldd	r25, Y+5	; 0x05
    16a2:	82 30       	cpi	r24, 0x02	; 2
    16a4:	91 05       	cpc	r25, r1
    16a6:	34 f4       	brge	.+12     	; 0x16b4 <DIO_u8GetPinValue+0x3e>
    16a8:	2c 81       	ldd	r18, Y+4	; 0x04
    16aa:	3d 81       	ldd	r19, Y+5	; 0x05
    16ac:	21 15       	cp	r18, r1
    16ae:	31 05       	cpc	r19, r1
    16b0:	61 f0       	breq	.+24     	; 0x16ca <DIO_u8GetPinValue+0x54>
    16b2:	52 c0       	rjmp	.+164    	; 0x1758 <DIO_u8GetPinValue+0xe2>
    16b4:	4c 81       	ldd	r20, Y+4	; 0x04
    16b6:	5d 81       	ldd	r21, Y+5	; 0x05
    16b8:	42 30       	cpi	r20, 0x02	; 2
    16ba:	51 05       	cpc	r21, r1
    16bc:	51 f1       	breq	.+84     	; 0x1712 <DIO_u8GetPinValue+0x9c>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	b9 f1       	breq	.+110    	; 0x1736 <DIO_u8GetPinValue+0xc0>
    16c8:	47 c0       	rjmp	.+142    	; 0x1758 <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8PORTA : Local_u8PinVal = GET_BIT(PINA,Copy_u8Pin);break;
    16ca:	e9 e3       	ldi	r30, 0x39	; 57
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_u8GetPinValue+0x6c>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_u8GetPinValue+0x68>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	35 c0       	rjmp	.+106    	; 0x1758 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTB : Local_u8PinVal = GET_BIT(PINB,Copy_u8Pin);break;
    16ee:	e6 e3       	ldi	r30, 0x36	; 54
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_u8GetPinValue+0x90>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_u8GetPinValue+0x8c>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	23 c0       	rjmp	.+70     	; 0x1758 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTC : Local_u8PinVal = GET_BIT(PINC,Copy_u8Pin);break;
    1712:	e3 e3       	ldi	r30, 0x33	; 51
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a9 01       	movw	r20, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_u8GetPinValue+0xb4>
    1726:	55 95       	asr	r21
    1728:	47 95       	ror	r20
    172a:	8a 95       	dec	r24
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_u8GetPinValue+0xb0>
    172e:	ca 01       	movw	r24, r20
    1730:	81 70       	andi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	11 c0       	rjmp	.+34     	; 0x1758 <DIO_u8GetPinValue+0xe2>
	case DIO_u8PORTD : Local_u8PinVal = GET_BIT(PIND,Copy_u8Pin);break;
    1736:	e0 e3       	ldi	r30, 0x30	; 48
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a9 01       	movw	r20, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_u8GetPinValue+0xd8>
    174a:	55 95       	asr	r21
    174c:	47 95       	ror	r20
    174e:	8a 95       	dec	r24
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_u8GetPinValue+0xd4>
    1752:	ca 01       	movw	r24, r20
    1754:	81 70       	andi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
	};
	return Local_u8PinVal;
    1758:	89 81       	ldd	r24, Y+1	; 0x01

}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <Dio_SetPinMode>:
#include "STD_TYPES.h"
#include "Macros.h"
#include "Registers.h"
#include "Dio.h"
void Dio_SetPinMode(Dio_PortType port, Dio_PinType pin, Dio_PinModeType mode)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	29 97       	sbiw	r28, 0x09	; 9
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	6a 83       	std	Y+2, r22	; 0x02
    1782:	4b 83       	std	Y+3, r20	; 0x03
    if (mode == DIO_PIN_OUTPUT)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 23       	and	r24, r24
    1788:	09 f0       	breq	.+2      	; 0x178c <Dio_SetPinMode+0x22>
    178a:	6f c0       	rjmp	.+222    	; 0x186a <Dio_SetPinMode+0x100>
    {
        switch (port)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	39 87       	std	Y+9, r19	; 0x09
    1794:	28 87       	std	Y+8, r18	; 0x08
    1796:	88 85       	ldd	r24, Y+8	; 0x08
    1798:	99 85       	ldd	r25, Y+9	; 0x09
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	49 f1       	breq	.+82     	; 0x17f2 <Dio_SetPinMode+0x88>
    17a0:	28 85       	ldd	r18, Y+8	; 0x08
    17a2:	39 85       	ldd	r19, Y+9	; 0x09
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <Dio_SetPinMode+0x4a>
    17aa:	88 85       	ldd	r24, Y+8	; 0x08
    17ac:	99 85       	ldd	r25, Y+9	; 0x09
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	61 f0       	breq	.+24     	; 0x17ca <Dio_SetPinMode+0x60>
    17b2:	e2 c1       	rjmp	.+964    	; 0x1b78 <Dio_SetPinMode+0x40e>
    17b4:	28 85       	ldd	r18, Y+8	; 0x08
    17b6:	39 85       	ldd	r19, Y+9	; 0x09
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	71 f1       	breq	.+92     	; 0x181a <Dio_SetPinMode+0xb0>
    17be:	88 85       	ldd	r24, Y+8	; 0x08
    17c0:	99 85       	ldd	r25, Y+9	; 0x09
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	e9 f1       	breq	.+122    	; 0x1842 <Dio_SetPinMode+0xd8>
    17c8:	d7 c1       	rjmp	.+942    	; 0x1b78 <Dio_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            SET_BIT(DDRA, pin);
    17ca:	aa e3       	ldi	r26, 0x3A	; 58
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ea e3       	ldi	r30, 0x3A	; 58
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <Dio_SetPinMode+0x7e>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <Dio_SetPinMode+0x7a>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	c3 c1       	rjmp	.+902    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            SET_BIT(DDRB, pin);
    17f2:	a7 e3       	ldi	r26, 0x37	; 55
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <Dio_SetPinMode+0xa6>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <Dio_SetPinMode+0xa2>
    1814:	84 2b       	or	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	af c1       	rjmp	.+862    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            SET_BIT(DDRC, pin);
    181a:	a4 e3       	ldi	r26, 0x34	; 52
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e4 e3       	ldi	r30, 0x34	; 52
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <Dio_SetPinMode+0xce>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <Dio_SetPinMode+0xca>
    183c:	84 2b       	or	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	9b c1       	rjmp	.+822    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            SET_BIT(DDRD, pin);
    1842:	a1 e3       	ldi	r26, 0x31	; 49
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e1 e3       	ldi	r30, 0x31	; 49
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <Dio_SetPinMode+0xf6>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <Dio_SetPinMode+0xf2>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	87 c1       	rjmp	.+782    	; 0x1b78 <Dio_SetPinMode+0x40e>

        default:
            break;
        }
    }
    else if (mode == DIO_PIN_INPUT_FLOATING)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	09 f0       	breq	.+2      	; 0x1872 <Dio_SetPinMode+0x108>
    1870:	c2 c0       	rjmp	.+388    	; 0x19f6 <Dio_SetPinMode+0x28c>
    {
        switch (port)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3f 83       	std	Y+7, r19	; 0x07
    187a:	2e 83       	std	Y+6, r18	; 0x06
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <Dio_SetPinMode+0x11e>
    1886:	3f c0       	rjmp	.+126    	; 0x1906 <Dio_SetPinMode+0x19c>
    1888:	2e 81       	ldd	r18, Y+6	; 0x06
    188a:	3f 81       	ldd	r19, Y+7	; 0x07
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <Dio_SetPinMode+0x132>
    1892:	8e 81       	ldd	r24, Y+6	; 0x06
    1894:	9f 81       	ldd	r25, Y+7	; 0x07
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	71 f0       	breq	.+28     	; 0x18b6 <Dio_SetPinMode+0x14c>
    189a:	6e c1       	rjmp	.+732    	; 0x1b78 <Dio_SetPinMode+0x40e>
    189c:	2e 81       	ldd	r18, Y+6	; 0x06
    189e:	3f 81       	ldd	r19, Y+7	; 0x07
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <Dio_SetPinMode+0x13e>
    18a6:	57 c0       	rjmp	.+174    	; 0x1956 <Dio_SetPinMode+0x1ec>
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <Dio_SetPinMode+0x14a>
    18b2:	79 c0       	rjmp	.+242    	; 0x19a6 <Dio_SetPinMode+0x23c>
    18b4:	61 c1       	rjmp	.+706    	; 0x1b78 <Dio_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    18b6:	aa e3       	ldi	r26, 0x3A	; 58
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ea e3       	ldi	r30, 0x3A	; 58
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <Dio_SetPinMode+0x168>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	2a 95       	dec	r18
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <Dio_SetPinMode+0x164>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
            CLR_BIT(PORTA, pin);
    18dc:	ab e3       	ldi	r26, 0x3B	; 59
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <Dio_SetPinMode+0x190>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <Dio_SetPinMode+0x18c>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	39 c1       	rjmp	.+626    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1906:	a7 e3       	ldi	r26, 0x37	; 55
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e7 e3       	ldi	r30, 0x37	; 55
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <Dio_SetPinMode+0x1b8>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	2a 95       	dec	r18
    1924:	e2 f7       	brpl	.-8      	; 0x191e <Dio_SetPinMode+0x1b4>
    1926:	80 95       	com	r24
    1928:	84 23       	and	r24, r20
    192a:	8c 93       	st	X, r24
            CLR_BIT(PORTB, pin);
    192c:	a8 e3       	ldi	r26, 0x38	; 56
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e8 e3       	ldi	r30, 0x38	; 56
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <Dio_SetPinMode+0x1e0>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <Dio_SetPinMode+0x1dc>
    194e:	80 95       	com	r24
    1950:	84 23       	and	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	11 c1       	rjmp	.+546    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1956:	a4 e3       	ldi	r26, 0x34	; 52
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e4 e3       	ldi	r30, 0x34	; 52
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <Dio_SetPinMode+0x208>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	2a 95       	dec	r18
    1974:	e2 f7       	brpl	.-8      	; 0x196e <Dio_SetPinMode+0x204>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
            CLR_BIT(PORTC, pin);
    197c:	a5 e3       	ldi	r26, 0x35	; 53
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e3       	ldi	r30, 0x35	; 53
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <Dio_SetPinMode+0x230>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <Dio_SetPinMode+0x22c>
    199e:	80 95       	com	r24
    19a0:	84 23       	and	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	e9 c0       	rjmp	.+466    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    19a6:	a1 e3       	ldi	r26, 0x31	; 49
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e1 e3       	ldi	r30, 0x31	; 49
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <Dio_SetPinMode+0x258>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	2a 95       	dec	r18
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <Dio_SetPinMode+0x254>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
            CLR_BIT(PORTD, pin);
    19cc:	a2 e3       	ldi	r26, 0x32	; 50
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e2 e3       	ldi	r30, 0x32	; 50
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <Dio_SetPinMode+0x280>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <Dio_SetPinMode+0x27c>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	c1 c0       	rjmp	.+386    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        default:
            break;
        }
    }
    else if (mode == DIO_PIN_INPUT_PULLUP)
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	09 f0       	breq	.+2      	; 0x19fe <Dio_SetPinMode+0x294>
    19fc:	bd c0       	rjmp	.+378    	; 0x1b78 <Dio_SetPinMode+0x40e>
    {
        switch (port)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <Dio_SetPinMode+0x2aa>
    1a12:	3e c0       	rjmp	.+124    	; 0x1a90 <Dio_SetPinMode+0x326>
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <Dio_SetPinMode+0x2be>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <Dio_SetPinMode+0x2d8>
    1a26:	a8 c0       	rjmp	.+336    	; 0x1b78 <Dio_SetPinMode+0x40e>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <Dio_SetPinMode+0x2ca>
    1a32:	55 c0       	rjmp	.+170    	; 0x1ade <Dio_SetPinMode+0x374>
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <Dio_SetPinMode+0x2d6>
    1a3e:	76 c0       	rjmp	.+236    	; 0x1b2c <Dio_SetPinMode+0x3c2>
    1a40:	9b c0       	rjmp	.+310    	; 0x1b78 <Dio_SetPinMode+0x40e>
        {
        case DIO_PORTA:
            CLR_BIT(DDRA, pin);
    1a42:	aa e3       	ldi	r26, 0x3A	; 58
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	ea e3       	ldi	r30, 0x3A	; 58
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <Dio_SetPinMode+0x2f4>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	2a 95       	dec	r18
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <Dio_SetPinMode+0x2f0>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
            SET_BIT(PORTA, pin);
    1a68:	ab e3       	ldi	r26, 0x3B	; 59
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	eb e3       	ldi	r30, 0x3B	; 59
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <Dio_SetPinMode+0x31c>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <Dio_SetPinMode+0x318>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	74 c0       	rjmp	.+232    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTB:
            CLR_BIT(DDRB, pin);
    1a90:	a7 e3       	ldi	r26, 0x37	; 55
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e7 e3       	ldi	r30, 0x37	; 55
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <Dio_SetPinMode+0x342>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	2a 95       	dec	r18
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <Dio_SetPinMode+0x33e>
    1ab0:	80 95       	com	r24
    1ab2:	84 23       	and	r24, r20
    1ab4:	8c 93       	st	X, r24
            SET_BIT(PORTB, pin);
    1ab6:	a8 e3       	ldi	r26, 0x38	; 56
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e8 e3       	ldi	r30, 0x38	; 56
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <Dio_SetPinMode+0x36a>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <Dio_SetPinMode+0x366>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	4d c0       	rjmp	.+154    	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTC:
            CLR_BIT(DDRC, pin);
    1ade:	a4 e3       	ldi	r26, 0x34	; 52
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e4 e3       	ldi	r30, 0x34	; 52
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <Dio_SetPinMode+0x390>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	2a 95       	dec	r18
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <Dio_SetPinMode+0x38c>
    1afe:	80 95       	com	r24
    1b00:	84 23       	and	r24, r20
    1b02:	8c 93       	st	X, r24
            SET_BIT(PORTC, pin);
    1b04:	a5 e3       	ldi	r26, 0x35	; 53
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <Dio_SetPinMode+0x3b8>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <Dio_SetPinMode+0x3b4>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	26 c0       	rjmp	.+76     	; 0x1b78 <Dio_SetPinMode+0x40e>
            break;
        case DIO_PORTD:
            CLR_BIT(DDRD, pin);
    1b2c:	a1 e3       	ldi	r26, 0x31	; 49
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e1 e3       	ldi	r30, 0x31	; 49
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <Dio_SetPinMode+0x3de>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	2a 95       	dec	r18
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <Dio_SetPinMode+0x3da>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
            SET_BIT(PORTD, pin);
    1b52:	a2 e3       	ldi	r26, 0x32	; 50
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e2 e3       	ldi	r30, 0x32	; 50
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <Dio_SetPinMode+0x406>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <Dio_SetPinMode+0x402>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1b78:	29 96       	adiw	r28, 0x09	; 9
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Dio_SetPinLevel>:

void Dio_SetPinLevel(Dio_PortType port, Dio_PinType pin, Dio_PinLevelType level)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	27 97       	sbiw	r28, 0x07	; 7
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	6a 83       	std	Y+2, r22	; 0x02
    1ba2:	4b 83       	std	Y+3, r20	; 0x03
    if (level == STD_HIGH)
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <Dio_SetPinLevel+0x22>
    1baa:	6f c0       	rjmp	.+222    	; 0x1c8a <Dio_SetPinLevel+0x100>
    {
        switch (port)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3f 83       	std	Y+7, r19	; 0x07
    1bb4:	2e 83       	std	Y+6, r18	; 0x06
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	49 f1       	breq	.+82     	; 0x1c12 <Dio_SetPinLevel+0x88>
    1bc0:	2e 81       	ldd	r18, Y+6	; 0x06
    1bc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <Dio_SetPinLevel+0x4a>
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <Dio_SetPinLevel+0x60>
    1bd2:	d2 c0       	rjmp	.+420    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
    1bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd8:	22 30       	cpi	r18, 0x02	; 2
    1bda:	31 05       	cpc	r19, r1
    1bdc:	71 f1       	breq	.+92     	; 0x1c3a <Dio_SetPinLevel+0xb0>
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	83 30       	cpi	r24, 0x03	; 3
    1be4:	91 05       	cpc	r25, r1
    1be6:	e9 f1       	breq	.+122    	; 0x1c62 <Dio_SetPinLevel+0xd8>
    1be8:	c7 c0       	rjmp	.+398    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            SET_BIT(PORTA, pin);
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <Dio_SetPinLevel+0x7e>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <Dio_SetPinLevel+0x7a>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	b3 c0       	rjmp	.+358    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            SET_BIT(PORTB, pin);
    1c12:	a8 e3       	ldi	r26, 0x38	; 56
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e8 e3       	ldi	r30, 0x38	; 56
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <Dio_SetPinLevel+0xa6>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <Dio_SetPinLevel+0xa2>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
    1c38:	9f c0       	rjmp	.+318    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            SET_BIT(PORTC, pin);
    1c3a:	a5 e3       	ldi	r26, 0x35	; 53
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e5 e3       	ldi	r30, 0x35	; 53
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <Dio_SetPinLevel+0xce>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <Dio_SetPinLevel+0xca>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	8b c0       	rjmp	.+278    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            SET_BIT(PORTD, pin);
    1c62:	a2 e3       	ldi	r26, 0x32	; 50
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e2 e3       	ldi	r30, 0x32	; 50
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <Dio_SetPinLevel+0xf6>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <Dio_SetPinLevel+0xf2>
    1c84:	84 2b       	or	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	77 c0       	rjmp	.+238    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        default:
            break;
        }
    }
    else if (level == STD_LOW)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <Dio_SetPinLevel+0x108>
    1c90:	73 c0       	rjmp	.+230    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
    {
        switch (port)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	59 f1       	breq	.+86     	; 0x1cfc <Dio_SetPinLevel+0x172>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	2c f4       	brge	.+10     	; 0x1cba <Dio_SetPinLevel+0x130>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f0       	breq	.+26     	; 0x1cd2 <Dio_SetPinLevel+0x148>
    1cb8:	5f c0       	rjmp	.+190    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	89 f1       	breq	.+98     	; 0x1d26 <Dio_SetPinLevel+0x19c>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <Dio_SetPinLevel+0x146>
    1cce:	40 c0       	rjmp	.+128    	; 0x1d50 <Dio_SetPinLevel+0x1c6>
    1cd0:	53 c0       	rjmp	.+166    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
        {
        case DIO_PORTA:
            CLR_BIT(PORTA, pin);
    1cd2:	ab e3       	ldi	r26, 0x3B	; 59
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	eb e3       	ldi	r30, 0x3B	; 59
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	48 2f       	mov	r20, r24
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	28 2f       	mov	r18, r24
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <Dio_SetPinLevel+0x166>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <Dio_SetPinLevel+0x162>
    1cf4:	80 95       	com	r24
    1cf6:	84 23       	and	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	3e c0       	rjmp	.+124    	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTB:
            CLR_BIT(PORTB, pin);
    1cfc:	a8 e3       	ldi	r26, 0x38	; 56
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e8 e3       	ldi	r30, 0x38	; 56
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <Dio_SetPinLevel+0x190>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <Dio_SetPinLevel+0x18c>
    1d1e:	80 95       	com	r24
    1d20:	84 23       	and	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	29 c0       	rjmp	.+82     	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTC:
            CLR_BIT(PORTC, pin);
    1d26:	a5 e3       	ldi	r26, 0x35	; 53
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e5 e3       	ldi	r30, 0x35	; 53
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <Dio_SetPinLevel+0x1ba>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <Dio_SetPinLevel+0x1b6>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <Dio_SetPinLevel+0x1ee>
            break;
        case DIO_PORTD:
            CLR_BIT(PORTD, pin);
    1d50:	a2 e3       	ldi	r26, 0x32	; 50
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e2 e3       	ldi	r30, 0x32	; 50
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <Dio_SetPinLevel+0x1e4>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <Dio_SetPinLevel+0x1e0>
    1d72:	80 95       	com	r24
    1d74:	84 23       	and	r24, r20
    1d76:	8c 93       	st	X, r24
            break;
        default:
            break;
        }
    }
}
    1d78:	27 96       	adiw	r28, 0x07	; 7
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <Dio_FlipPinLevel>:

Dio_PinLevelType Dio_FlipPinLevel(Dio_PortType port, Dio_PinType pin)
{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <Dio_FlipPinLevel+0x6>
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <Dio_FlipPinLevel+0x8>
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	6b 83       	std	Y+3, r22	; 0x03
    Dio_PinLevelType level = STD_HIGH;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    switch (port)
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3d 83       	std	Y+5, r19	; 0x05
    1da8:	2c 83       	std	Y+4, r18	; 0x04
    1daa:	4c 81       	ldd	r20, Y+4	; 0x04
    1dac:	5d 81       	ldd	r21, Y+5	; 0x05
    1dae:	41 30       	cpi	r20, 0x01	; 1
    1db0:	51 05       	cpc	r21, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <Dio_FlipPinLevel+0x2c>
    1db4:	3c c0       	rjmp	.+120    	; 0x1e2e <Dio_FlipPinLevel+0xa4>
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	34 f4       	brge	.+12     	; 0x1dcc <Dio_FlipPinLevel+0x42>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	71 f0       	breq	.+28     	; 0x1de6 <Dio_FlipPinLevel+0x5c>
    1dca:	9c c0       	rjmp	.+312    	; 0x1f04 <Dio_FlipPinLevel+0x17a>
    1dcc:	4c 81       	ldd	r20, Y+4	; 0x04
    1dce:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd0:	42 30       	cpi	r20, 0x02	; 2
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <Dio_FlipPinLevel+0x4e>
    1dd6:	4f c0       	rjmp	.+158    	; 0x1e76 <Dio_FlipPinLevel+0xec>
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	9d 81       	ldd	r25, Y+5	; 0x05
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	91 05       	cpc	r25, r1
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <Dio_FlipPinLevel+0x5a>
    1de2:	6d c0       	rjmp	.+218    	; 0x1ebe <Dio_FlipPinLevel+0x134>
    1de4:	8f c0       	rjmp	.+286    	; 0x1f04 <Dio_FlipPinLevel+0x17a>
    {
    case DIO_PORTA:
        TOG_BIT(PORTA, pin);
    1de6:	ab e3       	ldi	r26, 0x3B	; 59
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	eb e3       	ldi	r30, 0x3B	; 59
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <Dio_FlipPinLevel+0x78>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	2a 95       	dec	r18
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <Dio_FlipPinLevel+0x74>
    1e06:	84 27       	eor	r24, r20
    1e08:	8c 93       	st	X, r24
        level = GET_BIT(PORTA, pin);
    1e0a:	eb e3       	ldi	r30, 0x3B	; 59
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <Dio_FlipPinLevel+0x98>
    1e1e:	55 95       	asr	r21
    1e20:	47 95       	ror	r20
    1e22:	8a 95       	dec	r24
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <Dio_FlipPinLevel+0x94>
    1e26:	ca 01       	movw	r24, r20
    1e28:	81 70       	andi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6b c0       	rjmp	.+214    	; 0x1f04 <Dio_FlipPinLevel+0x17a>
        break;
    case DIO_PORTB:
        TOG_BIT(PORTB, pin);
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <Dio_FlipPinLevel+0xc0>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	2a 95       	dec	r18
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <Dio_FlipPinLevel+0xbc>
    1e4e:	84 27       	eor	r24, r20
    1e50:	8c 93       	st	X, r24
        level = GET_BIT(PORTB, pin);
    1e52:	e8 e3       	ldi	r30, 0x38	; 56
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <Dio_FlipPinLevel+0xe0>
    1e66:	55 95       	asr	r21
    1e68:	47 95       	ror	r20
    1e6a:	8a 95       	dec	r24
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <Dio_FlipPinLevel+0xdc>
    1e6e:	ca 01       	movw	r24, r20
    1e70:	81 70       	andi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	47 c0       	rjmp	.+142    	; 0x1f04 <Dio_FlipPinLevel+0x17a>
        break;
    case DIO_PORTC:
        TOG_BIT(PORTC, pin);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <Dio_FlipPinLevel+0x108>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	2a 95       	dec	r18
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <Dio_FlipPinLevel+0x104>
    1e96:	84 27       	eor	r24, r20
    1e98:	8c 93       	st	X, r24
        level = GET_BIT(PORTC, pin);
    1e9a:	e5 e3       	ldi	r30, 0x35	; 53
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a9 01       	movw	r20, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <Dio_FlipPinLevel+0x128>
    1eae:	55 95       	asr	r21
    1eb0:	47 95       	ror	r20
    1eb2:	8a 95       	dec	r24
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <Dio_FlipPinLevel+0x124>
    1eb6:	ca 01       	movw	r24, r20
    1eb8:	81 70       	andi	r24, 0x01	; 1
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	23 c0       	rjmp	.+70     	; 0x1f04 <Dio_FlipPinLevel+0x17a>
        break;
    case DIO_PORTD:
        TOG_BIT(PORTD, pin);
    1ebe:	a2 e3       	ldi	r26, 0x32	; 50
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e2 e3       	ldi	r30, 0x32	; 50
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	48 2f       	mov	r20, r24
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <Dio_FlipPinLevel+0x150>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	2a 95       	dec	r18
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <Dio_FlipPinLevel+0x14c>
    1ede:	84 27       	eor	r24, r20
    1ee0:	8c 93       	st	X, r24
        level = GET_BIT(PORTD, pin);
    1ee2:	e2 e3       	ldi	r30, 0x32	; 50
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <Dio_FlipPinLevel+0x170>
    1ef6:	55 95       	asr	r21
    1ef8:	47 95       	ror	r20
    1efa:	8a 95       	dec	r24
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <Dio_FlipPinLevel+0x16c>
    1efe:	ca 01       	movw	r24, r20
    1f00:	81 70       	andi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return level;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <Dio_ReadPinLevel>:

Dio_PinLevelType Dio_ReadPinLevel(Dio_PortType port, Dio_PinType pin)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <Dio_ReadPinLevel+0x6>
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <Dio_ReadPinLevel+0x8>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	8a 83       	std	Y+2, r24	; 0x02
    1f26:	6b 83       	std	Y+3, r22	; 0x03
    Dio_PinLevelType level = STD_LOW;
    1f28:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	3d 83       	std	Y+5, r19	; 0x05
    1f32:	2c 83       	std	Y+4, r18	; 0x04
    1f34:	4c 81       	ldd	r20, Y+4	; 0x04
    1f36:	5d 81       	ldd	r21, Y+5	; 0x05
    1f38:	41 30       	cpi	r20, 0x01	; 1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	71 f1       	breq	.+92     	; 0x1f9a <Dio_ReadPinLevel+0x84>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	91 05       	cpc	r25, r1
    1f46:	34 f4       	brge	.+12     	; 0x1f54 <Dio_ReadPinLevel+0x3e>
    1f48:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4c:	21 15       	cp	r18, r1
    1f4e:	31 05       	cpc	r19, r1
    1f50:	69 f0       	breq	.+26     	; 0x1f6c <Dio_ReadPinLevel+0x56>
    1f52:	64 c0       	rjmp	.+200    	; 0x201c <Dio_ReadPinLevel+0x106>
    1f54:	4c 81       	ldd	r20, Y+4	; 0x04
    1f56:	5d 81       	ldd	r21, Y+5	; 0x05
    1f58:	42 30       	cpi	r20, 0x02	; 2
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	a1 f1       	breq	.+104    	; 0x1fc6 <Dio_ReadPinLevel+0xb0>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <Dio_ReadPinLevel+0x54>
    1f68:	44 c0       	rjmp	.+136    	; 0x1ff2 <Dio_ReadPinLevel+0xdc>
    1f6a:	58 c0       	rjmp	.+176    	; 0x201c <Dio_ReadPinLevel+0x106>
    {
    case DIO_PORTA:
        if (GET_BIT(PINA, pin) == 1)
    1f6c:	e9 e3       	ldi	r30, 0x39	; 57
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a9 01       	movw	r20, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <Dio_ReadPinLevel+0x6e>
    1f80:	55 95       	asr	r21
    1f82:	47 95       	ror	r20
    1f84:	8a 95       	dec	r24
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <Dio_ReadPinLevel+0x6a>
    1f88:	ca 01       	movw	r24, r20
    1f8a:	81 70       	andi	r24, 0x01	; 1
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <Dio_ReadPinLevel+0x7e>
    1f92:	44 c0       	rjmp	.+136    	; 0x201c <Dio_ReadPinLevel+0x106>
        {
            level = STD_HIGH;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	41 c0       	rjmp	.+130    	; 0x201c <Dio_ReadPinLevel+0x106>
        }
        break;
    case DIO_PORTB:
        if (GET_BIT(PINB, pin) == 1)
    1f9a:	e6 e3       	ldi	r30, 0x36	; 54
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	88 2f       	mov	r24, r24
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a9 01       	movw	r20, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <Dio_ReadPinLevel+0x9c>
    1fae:	55 95       	asr	r21
    1fb0:	47 95       	ror	r20
    1fb2:	8a 95       	dec	r24
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <Dio_ReadPinLevel+0x98>
    1fb6:	ca 01       	movw	r24, r20
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	88 23       	and	r24, r24
    1fbe:	71 f1       	breq	.+92     	; 0x201c <Dio_ReadPinLevel+0x106>
        {
            level = STD_HIGH;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	2b c0       	rjmp	.+86     	; 0x201c <Dio_ReadPinLevel+0x106>
        }
        break;
    case DIO_PORTC:
        if (GET_BIT(PINC, pin) == 1)
    1fc6:	e3 e3       	ldi	r30, 0x33	; 51
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <Dio_ReadPinLevel+0xc8>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <Dio_ReadPinLevel+0xc4>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	90 70       	andi	r25, 0x00	; 0
    1fe8:	88 23       	and	r24, r24
    1fea:	c1 f0       	breq	.+48     	; 0x201c <Dio_ReadPinLevel+0x106>
        {
            level = STD_HIGH;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	15 c0       	rjmp	.+42     	; 0x201c <Dio_ReadPinLevel+0x106>
        }
        break;
    case DIO_PORTD:
        if (GET_BIT(PIND, pin) == 1)
    1ff2:	e0 e3       	ldi	r30, 0x30	; 48
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a9 01       	movw	r20, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <Dio_ReadPinLevel+0xf4>
    2006:	55 95       	asr	r21
    2008:	47 95       	ror	r20
    200a:	8a 95       	dec	r24
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <Dio_ReadPinLevel+0xf0>
    200e:	ca 01       	movw	r24, r20
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	90 70       	andi	r25, 0x00	; 0
    2014:	88 23       	and	r24, r24
    2016:	11 f0       	breq	.+4      	; 0x201c <Dio_ReadPinLevel+0x106>
        {
            level = STD_HIGH;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
        }
        break;
    default:
        break;
    }
    return level;
    201c:	89 81       	ldd	r24, Y+1	; 0x01
}
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <Dio_SetPortMode>:

void Dio_SetPortMode(Dio_PortType port, Dio_PortModeType mode)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <Dio_SetPortMode+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <Dio_SetPortMode+0x8>
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	3c 83       	std	Y+4, r19	; 0x04
    2046:	2b 83       	std	Y+3, r18	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	d1 f0       	breq	.+52     	; 0x2086 <Dio_SetPortMode+0x58>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	2c f4       	brge	.+10     	; 0x2066 <Dio_SetPortMode+0x38>
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	61 f0       	breq	.+24     	; 0x207c <Dio_SetPortMode+0x4e>
    2064:	1e c0       	rjmp	.+60     	; 0x20a2 <Dio_SetPortMode+0x74>
    2066:	2b 81       	ldd	r18, Y+3	; 0x03
    2068:	3c 81       	ldd	r19, Y+4	; 0x04
    206a:	22 30       	cpi	r18, 0x02	; 2
    206c:	31 05       	cpc	r19, r1
    206e:	81 f0       	breq	.+32     	; 0x2090 <Dio_SetPortMode+0x62>
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	83 30       	cpi	r24, 0x03	; 3
    2076:	91 05       	cpc	r25, r1
    2078:	81 f0       	breq	.+32     	; 0x209a <Dio_SetPortMode+0x6c>
    207a:	13 c0       	rjmp	.+38     	; 0x20a2 <Dio_SetPortMode+0x74>
    {
    case DIO_PORTA:
        DDRA = mode;
    207c:	ea e3       	ldi	r30, 0x3A	; 58
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	80 83       	st	Z, r24
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <Dio_SetPortMode+0x74>
        break;
    case DIO_PORTB:
        DDRB = mode;
    2086:	e7 e3       	ldi	r30, 0x37	; 55
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	80 83       	st	Z, r24
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <Dio_SetPortMode+0x74>
        break;
    case DIO_PORTC:
        DDRC = mode;
    2090:	e4 e3       	ldi	r30, 0x34	; 52
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 83       	st	Z, r24
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <Dio_SetPortMode+0x74>
        break;
    case DIO_PORTD:
        DDRD = mode;
    209a:	e1 e3       	ldi	r30, 0x31	; 49
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <Dio_SetPortLevel>:
void Dio_SetPortLevel(Dio_PortType port, Dio_PortLevelType level)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <Dio_SetPortLevel+0x6>
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <Dio_SetPortLevel+0x8>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	6a 83       	std	Y+2, r22	; 0x02
    switch (port)
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3c 83       	std	Y+4, r19	; 0x04
    20c8:	2b 83       	std	Y+3, r18	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	d1 f0       	breq	.+52     	; 0x2108 <Dio_SetPortLevel+0x58>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <Dio_SetPortLevel+0x38>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <Dio_SetPortLevel+0x4e>
    20e6:	1e c0       	rjmp	.+60     	; 0x2124 <Dio_SetPortLevel+0x74>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <Dio_SetPortLevel+0x62>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	81 f0       	breq	.+32     	; 0x211c <Dio_SetPortLevel+0x6c>
    20fc:	13 c0       	rjmp	.+38     	; 0x2124 <Dio_SetPortLevel+0x74>
    {
    case DIO_PORTA:
        PORTA = level;
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	80 83       	st	Z, r24
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <Dio_SetPortLevel+0x74>
        break;
    case DIO_PORTB:
        PORTB = level;
    2108:	e8 e3       	ldi	r30, 0x38	; 56
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	80 83       	st	Z, r24
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <Dio_SetPortLevel+0x74>
        break;
    case DIO_PORTC:
        PORTC = level;
    2112:	e5 e3       	ldi	r30, 0x35	; 53
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	80 83       	st	Z, r24
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <Dio_SetPortLevel+0x74>
        break;
    case DIO_PORTD:
        PORTD = level;
    211c:	e2 e3       	ldi	r30, 0x32	; 50
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	80 83       	st	Z, r24
        break;
    default:
        break;
    }
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Dio_ReadPortLevel>:

Dio_PortLevelType Dio_ReadPortLevel(Dio_PortType port)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <Dio_ReadPortLevel+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <Dio_ReadPortLevel+0x8>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	8a 83       	std	Y+2, r24	; 0x02
    Dio_PortLevelType level = DIO_PORT_LOW;
    2140:	19 82       	std	Y+1, r1	; 0x01
    switch (port)
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	3c 83       	std	Y+4, r19	; 0x04
    214a:	2b 83       	std	Y+3, r18	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	91 05       	cpc	r25, r1
    2154:	d1 f0       	breq	.+52     	; 0x218a <Dio_ReadPortLevel+0x58>
    2156:	2b 81       	ldd	r18, Y+3	; 0x03
    2158:	3c 81       	ldd	r19, Y+4	; 0x04
    215a:	22 30       	cpi	r18, 0x02	; 2
    215c:	31 05       	cpc	r19, r1
    215e:	2c f4       	brge	.+10     	; 0x216a <Dio_ReadPortLevel+0x38>
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	61 f0       	breq	.+24     	; 0x2180 <Dio_ReadPortLevel+0x4e>
    2168:	1e c0       	rjmp	.+60     	; 0x21a6 <Dio_ReadPortLevel+0x74>
    216a:	2b 81       	ldd	r18, Y+3	; 0x03
    216c:	3c 81       	ldd	r19, Y+4	; 0x04
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	81 f0       	breq	.+32     	; 0x2194 <Dio_ReadPortLevel+0x62>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	91 05       	cpc	r25, r1
    217c:	81 f0       	breq	.+32     	; 0x219e <Dio_ReadPortLevel+0x6c>
    217e:	13 c0       	rjmp	.+38     	; 0x21a6 <Dio_ReadPortLevel+0x74>
    {
    case DIO_PORTA:
        level = PINA;
    2180:	e9 e3       	ldi	r30, 0x39	; 57
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	0e c0       	rjmp	.+28     	; 0x21a6 <Dio_ReadPortLevel+0x74>
        break;
    case DIO_PORTB:
        level = PINB;
    218a:	e6 e3       	ldi	r30, 0x36	; 54
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	09 c0       	rjmp	.+18     	; 0x21a6 <Dio_ReadPortLevel+0x74>
        break;
    case DIO_PORTC:
        level = PINC;
    2194:	e3 e3       	ldi	r30, 0x33	; 51
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	04 c0       	rjmp	.+8      	; 0x21a6 <Dio_ReadPortLevel+0x74>
        break;
    case DIO_PORTD:
        level = PIND;
    219e:	e0 e3       	ldi	r30, 0x30	; 48
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    return level;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <GIE_voidEnable>:
#include "GIE_interface.h"

//Global Interrupt Enable
//Enable
void GIE_voidEnable(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,SREG_I);
    21be:	af e5       	ldi	r26, 0x5F	; 95
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	ef e5       	ldi	r30, 0x5F	; 95
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	80 68       	ori	r24, 0x80	; 128
    21ca:	8c 93       	st	X, r24
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <GIE_voidDisable>:

//Disable
void GIE_voidDisable(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,SREG_I);
    21da:	af e5       	ldi	r26, 0x5F	; 95
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	ef e5       	ldi	r30, 0x5F	; 95
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8f 77       	andi	r24, 0x7F	; 127
    21e6:	8c 93       	st	X, r24
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <Lcd_Init>:
static void Lcd_InitPins(void);
static void Lcd_SendCommand(u8 command);
static void Lcd_SendData(u8 data);

void Lcd_Init(void)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	62 97       	sbiw	r28, 0x12	; 18
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    Lcd_InitPins();
    2202:	0e 94 ed 14 	call	0x29da	; 0x29da <Lcd_InitPins>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e2       	ldi	r26, 0x20	; 32
    220c:	b2 e4       	ldi	r27, 0x42	; 66
    220e:	8b 87       	std	Y+11, r24	; 0x0b
    2210:	9c 87       	std	Y+12, r25	; 0x0c
    2212:	ad 87       	std	Y+13, r26	; 0x0d
    2214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a ef       	ldi	r20, 0xFA	; 250
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8f 83       	std	Y+7, r24	; 0x07
    2230:	98 87       	std	Y+8, r25	; 0x08
    2232:	a9 87       	std	Y+9, r26	; 0x09
    2234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <Lcd_Init+0x6a>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <Lcd_Init+0xe8>
	else if (__tmp > 65535)
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <Lcd_Init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	7c 85       	ldd	r23, Y+12	; 0x0c
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <Lcd_Init+0xca>
    229a:	88 ec       	ldi	r24, 0xC8	; 200
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c 83       	std	Y+4, r25	; 0x04
    22a0:	8b 83       	std	Y+3, r24	; 0x03
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <Lcd_Init+0xb8>
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <Lcd_Init+0xac>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <Lcd_Init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <Lcd_Init+0xf4>
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    #endif
    Lcd_DisplayControlType display = {
        LCD_DISPLAY_STATUS,
        LCD_CURSOR_STATUS,
        LCD_LINE_STATUS,
        LCD_FONT_STATUS};
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	8f 87       	std	Y+15, r24	; 0x0f
    22ee:	18 8a       	std	Y+16, r1	; 0x10
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 8b       	std	Y+17, r24	; 0x11
    22f4:	1a 8a       	std	Y+18, r1	; 0x12
    Lcd_DisplayControl(display);
    22f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f8:	98 89       	ldd	r25, Y+16	; 0x10
    22fa:	a9 89       	ldd	r26, Y+17	; 0x11
    22fc:	ba 89       	ldd	r27, Y+18	; 0x12
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Lcd_DisplayControl>
    Lcd_DisplayClear();
    2306:	0e 94 8e 11 	call	0x231c	; 0x231c <Lcd_DisplayClear>
}
    230a:	62 96       	adiw	r28, 0x12	; 18
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <Lcd_DisplayClear>:

void Lcd_DisplayClear(void)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(0b00000001);
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}
    232a:	cf 91       	pop	r28
    232c:	df 91       	pop	r29
    232e:	08 95       	ret

00002330 <Lcd_DisplayCharacter>:

void Lcd_DisplayCharacter(u8 character)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(character);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	0e 94 02 14 	call	0x2804	; 0x2804 <Lcd_SendData>
}
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <Lcd_DisplayString>:

void Lcd_DisplayString(u8 *str)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <Lcd_DisplayString+0x6>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	0a c0       	rjmp	.+20     	; 0x236e <Lcd_DisplayString+0x24>
    while (*str != 0)
    {
        Lcd_SendData(*str);
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	80 81       	ld	r24, Z
    2360:	0e 94 02 14 	call	0x2804	; 0x2804 <Lcd_SendData>
        str++;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(character);
}

void Lcd_DisplayString(u8 *str)
{
    while (*str != 0)
    236e:	e9 81       	ldd	r30, Y+1	; 0x01
    2370:	fa 81       	ldd	r31, Y+2	; 0x02
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	89 f7       	brne	.-30     	; 0x235a <Lcd_DisplayString+0x10>
    {
        Lcd_SendData(*str);
        str++;
    }
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <Lcd_SetCursorPosition>:
void Lcd_SetCursorPosition(u8 row, u8 col)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <Lcd_SetCursorPosition+0x6>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = col + (0x40 * row);
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	00 24       	eor	r0, r0
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	07 94       	ror	r0
    23a0:	96 95       	lsr	r25
    23a2:	87 95       	ror	r24
    23a4:	07 94       	ror	r0
    23a6:	98 2f       	mov	r25, r24
    23a8:	80 2d       	mov	r24, r0
    23aa:	98 2f       	mov	r25, r24
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	89 0f       	add	r24, r25
    23b0:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendCommand(address);
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <Lcd_DisplayControl>:

void Lcd_DisplayControl(Lcd_DisplayControlType display)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	27 97       	sbiw	r28, 0x07	; 7
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	6a 83       	std	Y+2, r22	; 0x02
    23e0:	7b 83       	std	Y+3, r23	; 0x03
    23e2:	8c 83       	std	Y+4, r24	; 0x04
    23e4:	9d 83       	std	Y+5, r25	; 0x05
    /* Set Lines and Font */
    u8 command = 0b00100000;
    23e6:	80 e2       	ldi	r24, 0x20	; 32
    23e8:	89 83       	std	Y+1, r24	; 0x01
    #if (LCD_BATA_BINS == LCD_8_BINS)
        SET_BIT(command,4);
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	80 61       	ori	r24, 0x10	; 16
    23ee:	89 83       	std	Y+1, r24	; 0x01
    #endif
    if (display.line_status == LCD_TWO_LINES)
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	19 f4       	brne	.+6      	; 0x23fc <Lcd_DisplayControl+0x32>
    {
        SET_BIT(command, 3);
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	88 60       	ori	r24, 0x08	; 8
    23fa:	89 83       	std	Y+1, r24	; 0x01
    }
    if (display.font_status == LCD_FONT_5X10)
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	19 f4       	brne	.+6      	; 0x2408 <Lcd_DisplayControl+0x3e>
    {
        SET_BIT(command, 2);
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	84 60       	ori	r24, 0x04	; 4
    2406:	89 83       	std	Y+1, r24	; 0x01
    }
    Lcd_SendCommand(command);
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>

    /* Set Display and Cursor */
    if (display.display_status == LCD_DISPLAY_OFF)
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	88 23       	and	r24, r24
    2412:	21 f4       	brne	.+8      	; 0x241c <Lcd_DisplayControl+0x52>
    {
        Lcd_SendCommand(0b00001000);
    2414:	88 e0       	ldi	r24, 0x08	; 8
    2416:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
    241a:	21 c0       	rjmp	.+66     	; 0x245e <Lcd_DisplayControl+0x94>
    }
    else if (display.display_status == LCD_DISPLAY_ON)
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	f1 f4       	brne	.+60     	; 0x245e <Lcd_DisplayControl+0x94>
    {
        switch (display.cursor_status)
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	3f 83       	std	Y+7, r19	; 0x07
    242a:	2e 83       	std	Y+6, r18	; 0x06
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	69 f0       	breq	.+26     	; 0x2450 <Lcd_DisplayControl+0x86>
    2436:	2e 81       	ldd	r18, Y+6	; 0x06
    2438:	3f 81       	ldd	r19, Y+7	; 0x07
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	61 f0       	breq	.+24     	; 0x2458 <Lcd_DisplayControl+0x8e>
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	59 f4       	brne	.+22     	; 0x245e <Lcd_DisplayControl+0x94>
        {
        case LCD_CURSOR_OFF:
            Lcd_SendCommand(0b00001100);
    2448:	8c e0       	ldi	r24, 0x0C	; 12
    244a:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
    244e:	07 c0       	rjmp	.+14     	; 0x245e <Lcd_DisplayControl+0x94>
            break;
        case LCD_CURSOR_ON_BLINK:
            Lcd_SendCommand(0b00001111);
    2450:	8f e0       	ldi	r24, 0x0F	; 15
    2452:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
    2456:	03 c0       	rjmp	.+6      	; 0x245e <Lcd_DisplayControl+0x94>
            break;
        case LCD_CURSOR_ON_NOT_BLINK:
            Lcd_SendCommand(0b00001110);
    2458:	8e e0       	ldi	r24, 0x0E	; 14
    245a:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
            break;
        default:
            break;
        }
    }
}
    245e:	27 96       	adiw	r28, 0x07	; 7
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <Lcd_DisplayNumber>:

void Lcd_DisplayNumber(s32 num)
{
    2470:	ef 92       	push	r14
    2472:	ff 92       	push	r15
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	29 97       	sbiw	r28, 0x09	; 9
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	6e 83       	std	Y+6, r22	; 0x06
    248e:	7f 83       	std	Y+7, r23	; 0x07
    2490:	88 87       	std	Y+8, r24	; 0x08
    2492:	99 87       	std	Y+9, r25	; 0x09
    u32 reversed = 0;
    2494:	1a 82       	std	Y+2, r1	; 0x02
    2496:	1b 82       	std	Y+3, r1	; 0x03
    2498:	1c 82       	std	Y+4, r1	; 0x04
    249a:	1d 82       	std	Y+5, r1	; 0x05
    u8 counter = 0;
    249c:	19 82       	std	Y+1, r1	; 0x01
    if (num < 0)
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	a8 85       	ldd	r26, Y+8	; 0x08
    24a4:	b9 85       	ldd	r27, Y+9	; 0x09
    24a6:	bb 23       	and	r27, r27
    24a8:	94 f4       	brge	.+36     	; 0x24ce <Lcd_DisplayNumber+0x5e>
    {
        Lcd_SendData('-');
    24aa:	8d e2       	ldi	r24, 0x2D	; 45
    24ac:	0e 94 02 14 	call	0x2804	; 0x2804 <Lcd_SendData>
        num *= -1;
    24b0:	8e 81       	ldd	r24, Y+6	; 0x06
    24b2:	9f 81       	ldd	r25, Y+7	; 0x07
    24b4:	a8 85       	ldd	r26, Y+8	; 0x08
    24b6:	b9 85       	ldd	r27, Y+9	; 0x09
    24b8:	b0 95       	com	r27
    24ba:	a0 95       	com	r26
    24bc:	90 95       	com	r25
    24be:	81 95       	neg	r24
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	af 4f       	sbci	r26, 0xFF	; 255
    24c4:	bf 4f       	sbci	r27, 0xFF	; 255
    24c6:	8e 83       	std	Y+6, r24	; 0x06
    24c8:	9f 83       	std	Y+7, r25	; 0x07
    24ca:	a8 87       	std	Y+8, r26	; 0x08
    24cc:	b9 87       	std	Y+9, r27	; 0x09
    }
    do
    {
        reversed = reversed * 10 + (num % 10);
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	9b 81       	ldd	r25, Y+3	; 0x03
    24d2:	ac 81       	ldd	r26, Y+4	; 0x04
    24d4:	bd 81       	ldd	r27, Y+5	; 0x05
    24d6:	2a e0       	ldi	r18, 0x0A	; 10
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 36 1a 	call	0x346c	; 0x346c <__mulsi3>
    24e6:	7b 01       	movw	r14, r22
    24e8:	8c 01       	movw	r16, r24
    24ea:	8e 81       	ldd	r24, Y+6	; 0x06
    24ec:	9f 81       	ldd	r25, Y+7	; 0x07
    24ee:	a8 85       	ldd	r26, Y+8	; 0x08
    24f0:	b9 85       	ldd	r27, Y+9	; 0x09
    24f2:	2a e0       	ldi	r18, 0x0A	; 10
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divmodsi4>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8e 0d       	add	r24, r14
    2508:	9f 1d       	adc	r25, r15
    250a:	a0 1f       	adc	r26, r16
    250c:	b1 1f       	adc	r27, r17
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	9b 83       	std	Y+3, r25	; 0x03
    2512:	ac 83       	std	Y+4, r26	; 0x04
    2514:	bd 83       	std	Y+5, r27	; 0x05
        num = num / 10;
    2516:	8e 81       	ldd	r24, Y+6	; 0x06
    2518:	9f 81       	ldd	r25, Y+7	; 0x07
    251a:	a8 85       	ldd	r26, Y+8	; 0x08
    251c:	b9 85       	ldd	r27, Y+9	; 0x09
    251e:	2a e0       	ldi	r18, 0x0A	; 10
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 83 1a 	call	0x3506	; 0x3506 <__divmodsi4>
    252e:	da 01       	movw	r26, r20
    2530:	c9 01       	movw	r24, r18
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	9f 83       	std	Y+7, r25	; 0x07
    2536:	a8 87       	std	Y+8, r26	; 0x08
    2538:	b9 87       	std	Y+9, r27	; 0x09
        counter++;
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	89 83       	std	Y+1, r24	; 0x01
    } while (num != 0);
    2540:	8e 81       	ldd	r24, Y+6	; 0x06
    2542:	9f 81       	ldd	r25, Y+7	; 0x07
    2544:	a8 85       	ldd	r26, Y+8	; 0x08
    2546:	b9 85       	ldd	r27, Y+9	; 0x09
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	a1 05       	cpc	r26, r1
    254c:	b1 05       	cpc	r27, r1
    254e:	09 f0       	breq	.+2      	; 0x2552 <Lcd_DisplayNumber+0xe2>
    2550:	be cf       	rjmp	.-132    	; 0x24ce <Lcd_DisplayNumber+0x5e>
    do
    {
        Lcd_SendData(reversed % 10 + '0');
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	ac 81       	ldd	r26, Y+4	; 0x04
    2558:	bd 81       	ldd	r27, Y+5	; 0x05
    255a:	2a e0       	ldi	r18, 0x0A	; 10
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	bc 01       	movw	r22, r24
    2564:	cd 01       	movw	r24, r26
    2566:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__udivmodsi4>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	80 5d       	subi	r24, 0xD0	; 208
    2570:	0e 94 02 14 	call	0x2804	; 0x2804 <Lcd_SendData>
        reversed = reversed / 10;
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	9b 81       	ldd	r25, Y+3	; 0x03
    2578:	ac 81       	ldd	r26, Y+4	; 0x04
    257a:	bd 81       	ldd	r27, Y+5	; 0x05
    257c:	2a e0       	ldi	r18, 0x0A	; 10
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__udivmodsi4>
    258c:	da 01       	movw	r26, r20
    258e:	c9 01       	movw	r24, r18
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	9b 83       	std	Y+3, r25	; 0x03
    2594:	ac 83       	std	Y+4, r26	; 0x04
    2596:	bd 83       	std	Y+5, r27	; 0x05
        counter--;
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	81 50       	subi	r24, 0x01	; 1
    259c:	89 83       	std	Y+1, r24	; 0x01
    } while (counter != 0);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	88 23       	and	r24, r24
    25a2:	b9 f6       	brne	.-82     	; 0x2552 <Lcd_DisplayNumber+0xe2>
}
    25a4:	29 96       	adiw	r28, 0x09	; 9
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	08 95       	ret

000025be <Lcd_DisplayShiftLeft>:

void Lcd_DisplayShiftLeft(u8 counter)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <Lcd_DisplayShiftLeft+0x6>
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    25ca:	19 82       	std	Y+1, r1	; 0x01
    25cc:	06 c0       	rjmp	.+12     	; 0x25da <Lcd_DisplayShiftLeft+0x1c>
        Lcd_SendCommand(0b00011000);
    25ce:	88 e1       	ldi	r24, 0x18	; 24
    25d0:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}

void Lcd_DisplayShiftLeft(u8 counter)
{
    u8 i;
    for (i=0; i<counter; i++) {
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	99 81       	ldd	r25, Y+1	; 0x01
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	98 17       	cp	r25, r24
    25e0:	b0 f3       	brcs	.-20     	; 0x25ce <Lcd_DisplayShiftLeft+0x10>
        Lcd_SendCommand(0b00011000);
    }
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <Lcd_DisplayShiftRight>:

void Lcd_DisplayShiftRight(u8 counter)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <Lcd_DisplayShiftRight+0x6>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 i;
    for (i=0; i<counter; i++) {
    25f8:	19 82       	std	Y+1, r1	; 0x01
    25fa:	06 c0       	rjmp	.+12     	; 0x2608 <Lcd_DisplayShiftRight+0x1c>
        Lcd_SendCommand(0b00011100);
    25fc:	8c e1       	ldi	r24, 0x1C	; 28
    25fe:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}

void Lcd_DisplayShiftRight(u8 counter)
{
    u8 i;
    for (i=0; i<counter; i++) {
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	99 81       	ldd	r25, Y+1	; 0x01
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	98 17       	cp	r25, r24
    260e:	b0 f3       	brcs	.-20     	; 0x25fc <Lcd_DisplayShiftRight+0x10>
        Lcd_SendCommand(0b00011100);
    }
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <Lcd_ReturnHome>:

void Lcd_ReturnHome(void)
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(0b00000010);
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <Lcd_SendCommand>:

static void Lcd_SendCommand(u8 command)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	2f 97       	sbiw	r28, 0x0f	; 15
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	8f 87       	std	Y+15, r24	; 0x0f
    Dio_SetPinLevel(LCD_PIN_RS, STD_LOW);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    Dio_SetPinLevel(LCD_PIN_RW, STD_LOW);
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    #if ( LCD_BATA_BINS == LCD_8_BINS)
        Dio_SetPinLevel(LCD_PIN_D0, GET_BIT(command, 0));
    2658:	8f 85       	ldd	r24, Y+15	; 0x0f
    265a:	98 2f       	mov	r25, r24
    265c:	91 70       	andi	r25, 0x01	; 1
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	49 2f       	mov	r20, r25
    2664:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D1, GET_BIT(command, 1));
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	86 95       	lsr	r24
    266c:	98 2f       	mov	r25, r24
    266e:	91 70       	andi	r25, 0x01	; 1
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	49 2f       	mov	r20, r25
    2676:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D2, GET_BIT(command, 2));
    267a:	8f 85       	ldd	r24, Y+15	; 0x0f
    267c:	86 95       	lsr	r24
    267e:	86 95       	lsr	r24
    2680:	98 2f       	mov	r25, r24
    2682:	91 70       	andi	r25, 0x01	; 1
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	49 2f       	mov	r20, r25
    268a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D3, GET_BIT(command, 3));
    268e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2690:	86 95       	lsr	r24
    2692:	86 95       	lsr	r24
    2694:	86 95       	lsr	r24
    2696:	98 2f       	mov	r25, r24
    2698:	91 70       	andi	r25, 0x01	; 1
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	63 e0       	ldi	r22, 0x03	; 3
    269e:	49 2f       	mov	r20, r25
    26a0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D4, GET_BIT(command, 4));
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	82 95       	swap	r24
    26a8:	8f 70       	andi	r24, 0x0F	; 15
    26aa:	98 2f       	mov	r25, r24
    26ac:	91 70       	andi	r25, 0x01	; 1
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	64 e0       	ldi	r22, 0x04	; 4
    26b2:	49 2f       	mov	r20, r25
    26b4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D5, GET_BIT(command, 5));
    26b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ba:	82 95       	swap	r24
    26bc:	86 95       	lsr	r24
    26be:	87 70       	andi	r24, 0x07	; 7
    26c0:	98 2f       	mov	r25, r24
    26c2:	91 70       	andi	r25, 0x01	; 1
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	49 2f       	mov	r20, r25
    26ca:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D6, GET_BIT(command, 6));
    26ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d0:	82 95       	swap	r24
    26d2:	86 95       	lsr	r24
    26d4:	86 95       	lsr	r24
    26d6:	83 70       	andi	r24, 0x03	; 3
    26d8:	98 2f       	mov	r25, r24
    26da:	91 70       	andi	r25, 0x01	; 1
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	66 e0       	ldi	r22, 0x06	; 6
    26e0:	49 2f       	mov	r20, r25
    26e2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D7, GET_BIT(command, 7));
    26e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e8:	98 2f       	mov	r25, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	99 27       	eor	r25, r25
    26ee:	99 1f       	adc	r25, r25
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	67 e0       	ldi	r22, 0x07	; 7
    26f4:	49 2f       	mov	r20, r25
    26f6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_EN, STD_HIGH);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	62 e0       	ldi	r22, 0x02	; 2
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	8b 87       	std	Y+11, r24	; 0x0b
    270e:	9c 87       	std	Y+12, r25	; 0x0c
    2710:	ad 87       	std	Y+13, r26	; 0x0d
    2712:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	6b 85       	ldd	r22, Y+11	; 0x0b
    2716:	7c 85       	ldd	r23, Y+12	; 0x0c
    2718:	8d 85       	ldd	r24, Y+13	; 0x0d
    271a:	9e 85       	ldd	r25, Y+14	; 0x0e
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8f 83       	std	Y+7, r24	; 0x07
    272e:	98 87       	std	Y+8, r25	; 0x08
    2730:	a9 87       	std	Y+9, r26	; 0x09
    2732:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2734:	6f 81       	ldd	r22, Y+7	; 0x07
    2736:	78 85       	ldd	r23, Y+8	; 0x08
    2738:	89 85       	ldd	r24, Y+9	; 0x09
    273a:	9a 85       	ldd	r25, Y+10	; 0x0a
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <Lcd_SendCommand+0x128>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <Lcd_SendCommand+0x1a6>
	else if (__tmp > 65535)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <Lcd_SendCommand+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2770:	7c 85       	ldd	r23, Y+12	; 0x0c
    2772:	8d 85       	ldd	r24, Y+13	; 0x0d
    2774:	9e 85       	ldd	r25, Y+14	; 0x0e
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <Lcd_SendCommand+0x188>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 83       	std	Y+4, r25	; 0x04
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <Lcd_SendCommand+0x176>
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8d 81       	ldd	r24, Y+5	; 0x05
    27ae:	9e 81       	ldd	r25, Y+6	; 0x06
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9e 83       	std	Y+6, r25	; 0x06
    27b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8d 81       	ldd	r24, Y+5	; 0x05
    27b8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <Lcd_SendCommand+0x16a>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <Lcd_SendCommand+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <Lcd_SendCommand+0x1b2>
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        Dio_SetPinLevel(LCD_PIN_EN, STD_LOW);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_EN, STD_HIGH);
        _delay_ms(2);
        Dio_SetPinLevel(LCD_PIN_EN, STD_LOW);
    #endif
    
}
    27f2:	2f 96       	adiw	r28, 0x0f	; 15
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <Lcd_SendData>:

static void Lcd_SendData(u8 data)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	2f 97       	sbiw	r28, 0x0f	; 15
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	8f 87       	std	Y+15, r24	; 0x0f
    Dio_SetPinLevel(LCD_PIN_RS, STD_HIGH);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    Dio_SetPinLevel(LCD_PIN_RW, STD_LOW);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    #if ( LCD_BATA_BINS == LCD_8_BINS)
        Dio_SetPinLevel(LCD_PIN_D0, GET_BIT(data, 0));
    282e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2830:	98 2f       	mov	r25, r24
    2832:	91 70       	andi	r25, 0x01	; 1
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D1, GET_BIT(data, 1));
    283e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2840:	86 95       	lsr	r24
    2842:	98 2f       	mov	r25, r24
    2844:	91 70       	andi	r25, 0x01	; 1
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	49 2f       	mov	r20, r25
    284c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D2, GET_BIT(data, 2));
    2850:	8f 85       	ldd	r24, Y+15	; 0x0f
    2852:	86 95       	lsr	r24
    2854:	86 95       	lsr	r24
    2856:	98 2f       	mov	r25, r24
    2858:	91 70       	andi	r25, 0x01	; 1
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	62 e0       	ldi	r22, 0x02	; 2
    285e:	49 2f       	mov	r20, r25
    2860:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D3, GET_BIT(data, 3));
    2864:	8f 85       	ldd	r24, Y+15	; 0x0f
    2866:	86 95       	lsr	r24
    2868:	86 95       	lsr	r24
    286a:	86 95       	lsr	r24
    286c:	98 2f       	mov	r25, r24
    286e:	91 70       	andi	r25, 0x01	; 1
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	63 e0       	ldi	r22, 0x03	; 3
    2874:	49 2f       	mov	r20, r25
    2876:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D4, GET_BIT(data, 4));
    287a:	8f 85       	ldd	r24, Y+15	; 0x0f
    287c:	82 95       	swap	r24
    287e:	8f 70       	andi	r24, 0x0F	; 15
    2880:	98 2f       	mov	r25, r24
    2882:	91 70       	andi	r25, 0x01	; 1
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	49 2f       	mov	r20, r25
    288a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D5, GET_BIT(data, 5));
    288e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2890:	82 95       	swap	r24
    2892:	86 95       	lsr	r24
    2894:	87 70       	andi	r24, 0x07	; 7
    2896:	98 2f       	mov	r25, r24
    2898:	91 70       	andi	r25, 0x01	; 1
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	65 e0       	ldi	r22, 0x05	; 5
    289e:	49 2f       	mov	r20, r25
    28a0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D6, GET_BIT(data, 6));
    28a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a6:	82 95       	swap	r24
    28a8:	86 95       	lsr	r24
    28aa:	86 95       	lsr	r24
    28ac:	83 70       	andi	r24, 0x03	; 3
    28ae:	98 2f       	mov	r25, r24
    28b0:	91 70       	andi	r25, 0x01	; 1
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	66 e0       	ldi	r22, 0x06	; 6
    28b6:	49 2f       	mov	r20, r25
    28b8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_D7, GET_BIT(data, 7));
    28bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28be:	98 2f       	mov	r25, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	99 27       	eor	r25, r25
    28c4:	99 1f       	adc	r25, r25
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	67 e0       	ldi	r22, 0x07	; 7
    28ca:	49 2f       	mov	r20, r25
    28cc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_EN, STD_HIGH);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	62 e0       	ldi	r22, 0x02	; 2
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e4       	ldi	r27, 0x40	; 64
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    28e6:	ad 87       	std	Y+13, r26	; 0x0d
    28e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8f 83       	std	Y+7, r24	; 0x07
    2904:	98 87       	std	Y+8, r25	; 0x08
    2906:	a9 87       	std	Y+9, r26	; 0x09
    2908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <Lcd_SendData+0x128>
		__ticks = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <Lcd_SendData+0x1a6>
	else if (__tmp > 65535)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <Lcd_SendData+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	0f c0       	rjmp	.+30     	; 0x298c <Lcd_SendData+0x188>
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <Lcd_SendData+0x176>
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <Lcd_SendData+0x16a>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <Lcd_SendData+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <Lcd_SendData+0x1b2>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
        Dio_SetPinLevel(LCD_PIN_EN, STD_LOW);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	62 e0       	ldi	r22, 0x02	; 2
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Dio_SetPinLevel>
        Dio_SetPinLevel(LCD_PIN_EN, STD_HIGH);
        _delay_ms(5);
        Dio_SetPinLevel(LCD_PIN_EN, STD_LOW);
    #endif

}
    29c8:	2f 96       	adiw	r28, 0x0f	; 15
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <Lcd_InitPins>:

static void Lcd_InitPins(void)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    Dio_SetPinMode(LCD_PIN_RS, DIO_PIN_OUTPUT);
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    Dio_SetPinMode(LCD_PIN_RW, DIO_PIN_OUTPUT);
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    Dio_SetPinMode(LCD_PIN_EN, DIO_PIN_OUTPUT);
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	62 e0       	ldi	r22, 0x02	; 2
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    #if ( LCD_BATA_BINS == LCD_8_BINS)
        Dio_SetPinMode(LCD_PIN_D0, DIO_PIN_OUTPUT);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
        Dio_SetPinMode(LCD_PIN_D1, DIO_PIN_OUTPUT);
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
        Dio_SetPinMode(LCD_PIN_D2, DIO_PIN_OUTPUT);
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
        Dio_SetPinMode(LCD_PIN_D3, DIO_PIN_OUTPUT);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	63 e0       	ldi	r22, 0x03	; 3
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    #endif
    Dio_SetPinMode(LCD_PIN_D4, DIO_PIN_OUTPUT);
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	64 e0       	ldi	r22, 0x04	; 4
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    Dio_SetPinMode(LCD_PIN_D5, DIO_PIN_OUTPUT);
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	65 e0       	ldi	r22, 0x05	; 5
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    Dio_SetPinMode(LCD_PIN_D6, DIO_PIN_OUTPUT);
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	66 e0       	ldi	r22, 0x06	; 6
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    Dio_SetPinMode(LCD_PIN_D7, DIO_PIN_OUTPUT);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	67 e0       	ldi	r22, 0x07	; 7
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <Lcd_DrawSpeicalCharacter>:
void Lcd_DrawSpeicalCharacter(u8 *Copy_pu8Pattern,u8 Copy_u8Location,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	27 97       	sbiw	r28, 0x07	; 7
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
    2a6e:	6d 83       	std	Y+5, r22	; 0x05
    2a70:	4e 83       	std	Y+6, r20	; 0x06
    2a72:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8CGRAMAddr,Local_u8Counter;
    /*Calculate CGRAM Address, each address is 8 bytes size*/
    Local_u8CGRAMAddr =  Copy_u8Location * NUMBER_OF_CGRAM_LOCATION ;
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(Local_u8CGRAMAddr,6);
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	80 64       	ori	r24, 0x40	; 64
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
    /*acesss CGRAM of LCD
    set_bit_6 becouse we need to write the following command: 0b01xxxxxx
    */
   Lcd_SendCommand(Local_u8CGRAMAddr);
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
   /*write the patern in CGRAM*/
   for ( Local_u8Counter = 0; Local_u8Counter < NUMBER_OF_CGRAM_LOCATION; Local_u8Counter++)
    2a94:	19 82       	std	Y+1, r1	; 0x01
    2a96:	0e c0       	rjmp	.+28     	; 0x2ab4 <Lcd_DrawSpeicalCharacter+0x5e>
   {
    Lcd_SendData(Copy_pu8Pattern[Local_u8Counter]);
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	e2 0f       	add	r30, r18
    2aa6:	f3 1f       	adc	r31, r19
    2aa8:	80 81       	ld	r24, Z
    2aaa:	0e 94 02 14 	call	0x2804	; 0x2804 <Lcd_SendData>
    /*acesss CGRAM of LCD
    set_bit_6 becouse we need to write the following command: 0b01xxxxxx
    */
   Lcd_SendCommand(Local_u8CGRAMAddr);
   /*write the patern in CGRAM*/
   for ( Local_u8Counter = 0; Local_u8Counter < NUMBER_OF_CGRAM_LOCATION; Local_u8Counter++)
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	88 30       	cpi	r24, 0x08	; 8
    2ab8:	78 f3       	brcs	.-34     	; 0x2a98 <Lcd_DrawSpeicalCharacter+0x42>
   {
    Lcd_SendData(Copy_pu8Pattern[Local_u8Counter]);
   }

   /*send to pattern to DDRAM*/
   Lcd_SetCursorPosition(Copy_u8RowNum,Copy_u8ColNum);//to go to address of DDRAM
    2aba:	8e 81       	ldd	r24, Y+6	; 0x06
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	0e 94 c1 11 	call	0x2382	; 0x2382 <Lcd_SetCursorPosition>
   Lcd_DisplayCharacter(Copy_u8Location);//location==the asscey of Spical character
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	0e 94 98 11 	call	0x2330	; 0x2330 <Lcd_DisplayCharacter>
}
    2ac8:	27 96       	adiw	r28, 0x07	; 7
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <TIMER1_voidInit>:


void (*TIMER1_pvGlobalCallBack)(void) = NULL;

void TIMER1_voidInit(void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	/*choose fast PWM mode with top val ICR1*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2ae2:	af e4       	ldi	r26, 0x4F	; 79
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ef e4       	ldi	r30, 0x4F	; 79
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	8e 7f       	andi	r24, 0xFE	; 254
    2aee:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2af0:	af e4       	ldi	r26, 0x4F	; 79
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ef e4       	ldi	r30, 0x4F	; 79
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	82 60       	ori	r24, 0x02	; 2
    2afc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2afe:	ae e4       	ldi	r26, 0x4E	; 78
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	ee e4       	ldi	r30, 0x4E	; 78
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	88 60       	ori	r24, 0x08	; 8
    2b0a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2b0c:	ae e4       	ldi	r26, 0x4E	; 78
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	ee e4       	ldi	r30, 0x4E	; 78
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	80 61       	ori	r24, 0x10	; 16
    2b18:	8c 93       	st	X, r24
	/*clear in top set on compare*/
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2b1a:	af e4       	ldi	r26, 0x4F	; 79
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	ef e4       	ldi	r30, 0x4F	; 79
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	8f 7b       	andi	r24, 0xBF	; 191
    2b26:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2b28:	af e4       	ldi	r26, 0x4F	; 79
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ef e4       	ldi	r30, 0x4F	; 79
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 68       	ori	r24, 0x80	; 128
    2b34:	8c 93       	st	X, r24
	/*Prescaler 8*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    2b36:	ae e4       	ldi	r26, 0x4E	; 78
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	ee e4       	ldi	r30, 0x4E	; 78
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	8e 7f       	andi	r24, 0xFE	; 254
    2b42:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2b44:	ae e4       	ldi	r26, 0x4E	; 78
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ee e4       	ldi	r30, 0x4E	; 78
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	82 60       	ori	r24, 0x02	; 2
    2b50:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    2b52:	ae e4       	ldi	r26, 0x4E	; 78
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ee e4       	ldi	r30, 0x4E	; 78
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	8b 7f       	andi	r24, 0xFB	; 251
    2b5e:	8c 93       	st	X, r24
	
	//Disablr all of Interrupts
    CLR_BIT(TIMSK,TIMSK_TICIE1);
    2b60:	a9 e5       	ldi	r26, 0x59	; 89
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e9 e5       	ldi	r30, 0x59	; 89
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	8f 7d       	andi	r24, 0xDF	; 223
    2b6c:	8c 93       	st	X, r24
    CLR_BIT(TIMSK,TIMSK_TOIE1);
    2b6e:	a9 e5       	ldi	r26, 0x59	; 89
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e9 e5       	ldi	r30, 0x59	; 89
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8b 7f       	andi	r24, 0xFB	; 251
    2b7a:	8c 93       	st	X, r24
    CLR_BIT(TIMSK,TIMSK_OCIE1A);
    2b7c:	a9 e5       	ldi	r26, 0x59	; 89
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e9 e5       	ldi	r30, 0x59	; 89
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7e       	andi	r24, 0xEF	; 239
    2b88:	8c 93       	st	X, r24
    CLR_BIT(TIMSK,TIMSK_OCIE1B);
    2b8a:	a9 e5       	ldi	r26, 0x59	; 89
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e9 e5       	ldi	r30, 0x59	; 89
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	87 7f       	andi	r24, 0xF7	; 247
    2b96:	8c 93       	st	X, r24
}
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <TIMER1_voidSetTopVal>:

void TIMER1_voidSetTopVal(u16 Copy_u16CompVal)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <TIMER1_voidSetTopVal+0x6>
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
	/*top value*/
	ICR1 = Copy_u16CompVal ;
    2bac:	e6 e4       	ldi	r30, 0x46	; 70
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <TIMER1_voidSetCompareMatchVal>:

void TIMER1_voidSetCompareMatchVal(u16 Copy_u16CompVal)
{
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <TIMER1_voidSetCompareMatchVal+0x6>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompVal;
    2bd0:	ea e4       	ldi	r30, 0x4A	; 74
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <TIMER1_u8returnCompareMatchVal>:
u8 TIMER1_u8returnCompareMatchVal()
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
	return OCR1A ;
    2bee:	ea e4       	ldi	r30, 0x4A	; 74
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
}
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <ICU_voidICUInit>:

/*ICU PART**/

void ICU_voidICUInit(void)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
	/*enable noise canceller*/
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
    2c04:	ae e4       	ldi	r26, 0x4E	; 78
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	ee e4       	ldi	r30, 0x4E	; 78
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	80 68       	ori	r24, 0x80	; 128
    2c10:	8c 93       	st	X, r24
	/*trigger edge rising edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    2c12:	ae e4       	ldi	r26, 0x4E	; 78
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	ee e4       	ldi	r30, 0x4E	; 78
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	80 64       	ori	r24, 0x40	; 64
    2c1e:	8c 93       	st	X, r24
	/*enable interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2c20:	a9 e5       	ldi	r26, 0x59	; 89
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e9 e5       	ldi	r30, 0x59	; 89
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	80 62       	ori	r24, 0x20	; 32
    2c2c:	8c 93       	st	X, r24
}
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <ICU_u8EdgeSelect>:

u8 ICU_u8EdgeSelect(u8 copy_u8Edge)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <ICU_u8EdgeSelect+0x6>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <ICU_u8EdgeSelect+0x8>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8ErrorStatus;
	switch(copy_u8Edge)
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	3c 83       	std	Y+4, r19	; 0x04
    2c4a:	2b 83       	std	Y+3, r18	; 0x03
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	91 05       	cpc	r25, r1
    2c54:	31 f0       	breq	.+12     	; 0x2c62 <ICU_u8EdgeSelect+0x2e>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	22 30       	cpi	r18, 0x02	; 2
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	49 f0       	breq	.+18     	; 0x2c72 <ICU_u8EdgeSelect+0x3e>
    2c60:	10 c0       	rjmp	.+32     	; 0x2c82 <ICU_u8EdgeSelect+0x4e>
	{
	case ICU_RISING_EDGE : SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    2c62:	ae e4       	ldi	r26, 0x4E	; 78
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	ee e4       	ldi	r30, 0x4E	; 78
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 64       	ori	r24, 0x40	; 64
    2c6e:	8c 93       	st	X, r24
    2c70:	0a c0       	rjmp	.+20     	; 0x2c86 <ICU_u8EdgeSelect+0x52>
	case ICU_FALLING_EDGE : CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    2c72:	ae e4       	ldi	r26, 0x4E	; 78
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ee e4       	ldi	r30, 0x4E	; 78
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 7b       	andi	r24, 0xBF	; 191
    2c7e:	8c 93       	st	X, r24
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <ICU_u8EdgeSelect+0x52>
	default : local_u8ErrorStatus = NOT_OK;
    2c82:	82 e0       	ldi	r24, 0x02	; 2
    2c84:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8ErrorStatus;
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <ICU_u16ICURead>:

u16 ICU_u16ICURead(void)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2c9e:	e6 e4       	ldi	r30, 0x46	; 70
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
}
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <ICU_voidInterruptEnable>:

void ICU_voidInterruptEnable(void)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2cb4:	a9 e5       	ldi	r26, 0x59	; 89
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e9 e5       	ldi	r30, 0x59	; 89
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 62       	ori	r24, 0x20	; 32
    2cc0:	8c 93       	st	X, r24
}
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <ICU_voidInterruptDisable>:

void ICU_voidInterruptDisable()
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2cd0:	a9 e5       	ldi	r26, 0x59	; 89
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e9 e5       	ldi	r30, 0x59	; 89
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	8f 7d       	andi	r24, 0xDF	; 223
    2cdc:	8c 93       	st	X, r24
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <TIMER1_voidSetCallBack>:
void TIMER1_voidSetCallBack(void (*Copy_pvUserFunc) (void))
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <TIMER1_voidSetCallBack+0x6>
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvUserFunc != NULL)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	31 f0       	breq	.+12     	; 0x2d06 <TIMER1_voidSetCallBack+0x22>
	{
		TIMER1_pvGlobalCallBack = Copy_pvUserFunc;
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	90 93 cb 02 	sts	0x02CB, r25
    2d02:	80 93 ca 02 	sts	0x02CA, r24
	}
	else
	{
		/*do nothing*/
	}
}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <USART_voidInit>:
#include "USART_register.h"
#include "USART_config.h"
#include "USART_privet.h"

void USART_voidInit(void)
{
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    /*data size bit 2 to 8 bit mode*/
    CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2d18:	aa e2       	ldi	r26, 0x2A	; 42
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	ea e2       	ldi	r30, 0x2A	; 42
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8b 7f       	andi	r24, 0xFB	; 251
    2d24:	8c 93       	st	X, r24


    UCSRC = 134;
    2d26:	e0 e4       	ldi	r30, 0x40	; 64
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	86 e8       	ldi	r24, 0x86	; 134
    2d2c:	80 83       	st	Z, r24

    /*sety baud rate value */
    UBRRL = 51;
    2d2e:	e9 e2       	ldi	r30, 0x29	; 41
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	83 e3       	ldi	r24, 0x33	; 51
    2d34:	80 83       	st	Z, r24

    //RECEIVE ENABLE
    SET_BIT(UCSRB,UCSRB_RXEN);
    2d36:	aa e2       	ldi	r26, 0x2A	; 42
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	ea e2       	ldi	r30, 0x2A	; 42
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	80 61       	ori	r24, 0x10	; 16
    2d42:	8c 93       	st	X, r24
    //Transimission ENABLE
    SET_BIT(UCSRB,UCSRB_TXEN);
    2d44:	aa e2       	ldi	r26, 0x2A	; 42
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	ea e2       	ldi	r30, 0x2A	; 42
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	80 81       	ld	r24, Z
    2d4e:	88 60       	ori	r24, 0x08	; 8
    2d50:	8c 93       	st	X, r24
}
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <USART_voidSendData>:
 
void USART_voidSendData(u8 Copy_u8Data)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	0f 92       	push	r0
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	89 83       	std	Y+1, r24	; 0x01

    while (GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    2d64:	eb e2       	ldi	r30, 0x2B	; 43
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	82 95       	swap	r24
    2d6c:	86 95       	lsr	r24
    2d6e:	87 70       	andi	r24, 0x07	; 7
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	81 70       	andi	r24, 0x01	; 1
    2d76:	90 70       	andi	r25, 0x00	; 0
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	a1 f3       	breq	.-24     	; 0x2d64 <USART_voidSendData+0xc>
    
    UDR =   Copy_u8Data;        
    2d7c:	ec e2       	ldi	r30, 0x2C	; 44
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	80 83       	st	Z, r24
    
}
    2d84:	0f 90       	pop	r0
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <USART_u8Receive>:

u8 USART_u8Receive(void)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
    2d94:	eb e2       	ldi	r30, 0x2B	; 43
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 23       	and	r24, r24
    2d9c:	dc f7       	brge	.-10     	; 0x2d94 <USART_u8Receive+0x8>
     
    return UDR;
    2d9e:	ec e2       	ldi	r30, 0x2C	; 44
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <USART_u8SendString>:
void USART_u8SendString(u8 *str)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <USART_u8SendString+0x6>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	0a c0       	rjmp	.+20     	; 0x2dce <USART_u8SendString+0x24>
    while (*str != 0)
    {
    	USART_voidSendData(*str);
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	80 81       	ld	r24, Z
    2dc0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <USART_voidSendData>
        str++;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
     
    return UDR;
}
void USART_u8SendString(u8 *str)
{
    while (*str != 0)
    2dce:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 23       	and	r24, r24
    2dd6:	89 f7       	brne	.-30     	; 0x2dba <USART_u8SendString+0x10>
    {
    	USART_voidSendData(*str);
        str++;
    }
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <option_voidChooseOptione>:
#include "Timer1_interface.h"
#include "app2_interface.h"
#include "app2_config.h"
#include "APPuser_interface.h"
void option_voidChooseOptione(void)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	29 97       	sbiw	r28, 0x09	; 9
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
	u8 Unused,Local_u8option = 0;
    2df6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8ResevedVal = 0 ;
    2df8:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		USART_u8SendString("\noption is: ");
    2dfa:	8a e6       	ldi	r24, 0x6A	; 106
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
		//Lcd_DisplayString("pleas choice option");
		USART_u8SendString("\n1-lighting system    2-air condition system ");
    2e02:	87 e7       	ldi	r24, 0x77	; 119
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
		USART_u8SendString("\n3-door system     4-change user name and password \n5-exit ");
    2e0a:	85 ea       	ldi	r24, 0xA5	; 165
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
		USART_u8SendString("\nPlease Choose your option: ");
    2e12:	81 ee       	ldi	r24, 0xE1	; 225
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
		Local_u8option = USART_u8Receive();
    2e1a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2e1e:	8a 83       	std	Y+2, r24	; 0x02
		switch(Local_u8option)
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	39 87       	std	Y+9, r19	; 0x09
    2e28:	28 87       	std	Y+8, r18	; 0x08
    2e2a:	88 85       	ldd	r24, Y+8	; 0x08
    2e2c:	99 85       	ldd	r25, Y+9	; 0x09
    2e2e:	82 33       	cpi	r24, 0x32	; 50
    2e30:	91 05       	cpc	r25, r1
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <option_voidChooseOptione+0x54>
    2e34:	b8 c0       	rjmp	.+368    	; 0x2fa6 <option_voidChooseOptione+0x1c4>
    2e36:	28 85       	ldd	r18, Y+8	; 0x08
    2e38:	39 85       	ldd	r19, Y+9	; 0x09
    2e3a:	23 33       	cpi	r18, 0x33	; 51
    2e3c:	31 05       	cpc	r19, r1
    2e3e:	34 f4       	brge	.+12     	; 0x2e4c <option_voidChooseOptione+0x6a>
    2e40:	88 85       	ldd	r24, Y+8	; 0x08
    2e42:	99 85       	ldd	r25, Y+9	; 0x09
    2e44:	81 33       	cpi	r24, 0x31	; 49
    2e46:	91 05       	cpc	r25, r1
    2e48:	71 f0       	breq	.+28     	; 0x2e66 <option_voidChooseOptione+0x84>
    2e4a:	8e c1       	rjmp	.+796    	; 0x3168 <option_voidChooseOptione+0x386>
    2e4c:	28 85       	ldd	r18, Y+8	; 0x08
    2e4e:	39 85       	ldd	r19, Y+9	; 0x09
    2e50:	23 33       	cpi	r18, 0x33	; 51
    2e52:	31 05       	cpc	r19, r1
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <option_voidChooseOptione+0x76>
    2e56:	47 c1       	rjmp	.+654    	; 0x30e6 <option_voidChooseOptione+0x304>
    2e58:	88 85       	ldd	r24, Y+8	; 0x08
    2e5a:	99 85       	ldd	r25, Y+9	; 0x09
    2e5c:	84 33       	cpi	r24, 0x34	; 52
    2e5e:	91 05       	cpc	r25, r1
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <option_voidChooseOptione+0x82>
    2e62:	64 c1       	rjmp	.+712    	; 0x312c <option_voidChooseOptione+0x34a>
    2e64:	81 c1       	rjmp	.+770    	; 0x3168 <option_voidChooseOptione+0x386>
		{
			case option1 :
				USART_u8SendString("\nlighting system on");
    2e66:	8e ef       	ldi	r24, 0xFE	; 254
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\noption is: ");
    2e6e:	8a e6       	ldi	r24, 0x6A	; 106
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\n1-master    2-living");
    2e76:	82 e1       	ldi	r24, 0x12	; 18
    2e78:	91 e0       	ldi	r25, 0x01	; 1
    2e7a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\n3-bathroom   4-kitchen\n5-Main Options");
    2e7e:	88 e2       	ldi	r24, 0x28	; 40
    2e80:	91 e0       	ldi	r25, 0x01	; 1
    2e82:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\nPlease Choose your option: ");
    2e86:	81 ee       	ldi	r24, 0xE1	; 225
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				Local_u8ResevedVal = USART_u8Receive();
    2e8e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2e92:	89 83       	std	Y+1, r24	; 0x01
				switch(Local_u8ResevedVal)
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	3f 83       	std	Y+7, r19	; 0x07
    2e9c:	2e 83       	std	Y+6, r18	; 0x06
    2e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea2:	82 33       	cpi	r24, 0x32	; 50
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	89 f1       	breq	.+98     	; 0x2f0a <option_voidChooseOptione+0x128>
    2ea8:	2e 81       	ldd	r18, Y+6	; 0x06
    2eaa:	3f 81       	ldd	r19, Y+7	; 0x07
    2eac:	23 33       	cpi	r18, 0x33	; 51
    2eae:	31 05       	cpc	r19, r1
    2eb0:	34 f4       	brge	.+12     	; 0x2ebe <option_voidChooseOptione+0xdc>
    2eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb6:	81 33       	cpi	r24, 0x31	; 49
    2eb8:	91 05       	cpc	r25, r1
    2eba:	69 f0       	breq	.+26     	; 0x2ed6 <option_voidChooseOptione+0xf4>
    2ebc:	55 c1       	rjmp	.+682    	; 0x3168 <option_voidChooseOptione+0x386>
    2ebe:	2e 81       	ldd	r18, Y+6	; 0x06
    2ec0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ec2:	23 33       	cpi	r18, 0x33	; 51
    2ec4:	31 05       	cpc	r19, r1
    2ec6:	d9 f1       	breq	.+118    	; 0x2f3e <option_voidChooseOptione+0x15c>
    2ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eca:	9f 81       	ldd	r25, Y+7	; 0x07
    2ecc:	84 33       	cpi	r24, 0x34	; 52
    2ece:	91 05       	cpc	r25, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <option_voidChooseOptione+0xf2>
    2ed2:	4f c0       	rjmp	.+158    	; 0x2f72 <option_voidChooseOptione+0x190>
    2ed4:	49 c1       	rjmp	.+658    	; 0x3168 <option_voidChooseOptione+0x386>
				{
					case master :
						USART_u8SendString("\n1-ON   0-Off");
    2ed6:	8f e4       	ldi	r24, 0x4F	; 79
    2ed8:	91 e0       	ldi	r25, 0x01	; 1
    2eda:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    2ede:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2ee2:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	81 33       	cpi	r24, 0x31	; 49
    2ee8:	31 f4       	brne	.+12     	; 0x2ef6 <option_voidChooseOptione+0x114>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,master_pinLight,DIO_u8PIN_HIGH);
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2ef4:	39 c1       	rjmp	.+626    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	80 33       	cpi	r24, 0x30	; 48
    2efa:	09 f0       	breq	.+2      	; 0x2efe <option_voidChooseOptione+0x11c>
    2efc:	35 c1       	rjmp	.+618    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,master_pinLight,DIO_u8PIN_LOW);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f08:	2f c1       	rjmp	.+606    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						break;
					case living :
						USART_u8SendString("\n1-ON   0-Off");
    2f0a:	8f e4       	ldi	r24, 0x4F	; 79
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    2f12:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2f16:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	81 33       	cpi	r24, 0x31	; 49
    2f1c:	31 f4       	brne	.+12     	; 0x2f2a <option_voidChooseOptione+0x148>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,living_pinLight,DIO_u8PIN_HIGH);
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	61 e0       	ldi	r22, 0x01	; 1
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f28:	1f c1       	rjmp	.+574    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	80 33       	cpi	r24, 0x30	; 48
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <option_voidChooseOptione+0x150>
    2f30:	1b c1       	rjmp	.+566    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,living_pinLight,DIO_u8PIN_LOW);
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f3c:	15 c1       	rjmp	.+554    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						break;
					case bathroom:
						USART_u8SendString("\n1-ON   0-Off");
    2f3e:	8f e4       	ldi	r24, 0x4F	; 79
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    2f46:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2f4a:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	81 33       	cpi	r24, 0x31	; 49
    2f50:	31 f4       	brne	.+12     	; 0x2f5e <option_voidChooseOptione+0x17c>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,bathroom_pinLight,DIO_u8PIN_HIGH);
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	63 e0       	ldi	r22, 0x03	; 3
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f5c:	05 c1       	rjmp	.+522    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	80 33       	cpi	r24, 0x30	; 48
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <option_voidChooseOptione+0x184>
    2f64:	01 c1       	rjmp	.+514    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,bathroom_pinLight,DIO_u8PIN_LOW);
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	63 e0       	ldi	r22, 0x03	; 3
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f70:	fb c0       	rjmp	.+502    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						break;
					case kithen:
						USART_u8SendString("\n1-ON   0-Off");
    2f72:	8f e4       	ldi	r24, 0x4F	; 79
    2f74:	91 e0       	ldi	r25, 0x01	; 1
    2f76:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    2f7a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2f7e:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	81 33       	cpi	r24, 0x31	; 49
    2f84:	31 f4       	brne	.+12     	; 0x2f92 <option_voidChooseOptione+0x1b0>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,kithn_pinLight,DIO_u8PIN_HIGH);
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	62 e0       	ldi	r22, 0x02	; 2
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2f90:	eb c0       	rjmp	.+470    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	80 33       	cpi	r24, 0x30	; 48
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <option_voidChooseOptione+0x1b8>
    2f98:	e7 c0       	rjmp	.+462    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,kithn_pinLight,DIO_u8PIN_LOW);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	62 e0       	ldi	r22, 0x02	; 2
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    2fa4:	e1 c0       	rjmp	.+450    	; 0x3168 <option_voidChooseOptione+0x386>
					case MainOpionts:
						break;
				}
				break;
			case option2 :
				USART_u8SendString("\nair system on");
    2fa6:	8d e5       	ldi	r24, 0x5D	; 93
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\noption is: ");
    2fae:	8a e6       	ldi	r24, 0x6A	; 106
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\n1-master    2-living");
    2fb6:	82 e1       	ldi	r24, 0x12	; 18
    2fb8:	91 e0       	ldi	r25, 0x01	; 1
    2fba:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\n3-bathroom   4-kitchen\n5-Main Options");
    2fbe:	88 e2       	ldi	r24, 0x28	; 40
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\nchoose your room pleas:");
    2fc6:	8c e6       	ldi	r24, 0x6C	; 108
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				Local_u8ResevedVal = USART_u8Receive();
    2fce:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    2fd2:	89 83       	std	Y+1, r24	; 0x01
				switch(Local_u8ResevedVal)
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	3d 83       	std	Y+5, r19	; 0x05
    2fdc:	2c 83       	std	Y+4, r18	; 0x04
    2fde:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe2:	82 33       	cpi	r24, 0x32	; 50
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	89 f1       	breq	.+98     	; 0x304a <option_voidChooseOptione+0x268>
    2fe8:	2c 81       	ldd	r18, Y+4	; 0x04
    2fea:	3d 81       	ldd	r19, Y+5	; 0x05
    2fec:	23 33       	cpi	r18, 0x33	; 51
    2fee:	31 05       	cpc	r19, r1
    2ff0:	34 f4       	brge	.+12     	; 0x2ffe <option_voidChooseOptione+0x21c>
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff6:	81 33       	cpi	r24, 0x31	; 49
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	69 f0       	breq	.+26     	; 0x3016 <option_voidChooseOptione+0x234>
    2ffc:	b5 c0       	rjmp	.+362    	; 0x3168 <option_voidChooseOptione+0x386>
    2ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    3000:	3d 81       	ldd	r19, Y+5	; 0x05
    3002:	23 33       	cpi	r18, 0x33	; 51
    3004:	31 05       	cpc	r19, r1
    3006:	d9 f1       	breq	.+118    	; 0x307e <option_voidChooseOptione+0x29c>
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	84 33       	cpi	r24, 0x34	; 52
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <option_voidChooseOptione+0x232>
    3012:	4f c0       	rjmp	.+158    	; 0x30b2 <option_voidChooseOptione+0x2d0>
    3014:	a9 c0       	rjmp	.+338    	; 0x3168 <option_voidChooseOptione+0x386>
				{
					case master :
						USART_u8SendString("\n1-ON   0-Off");
    3016:	8f e4       	ldi	r24, 0x4F	; 79
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    301e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    3022:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	81 33       	cpi	r24, 0x31	; 49
    3028:	31 f4       	brne	.+12     	; 0x3036 <option_voidChooseOptione+0x254>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,master_pinair,DIO_u8PIN_HIGH);
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	64 e0       	ldi	r22, 0x04	; 4
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    3034:	99 c0       	rjmp	.+306    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	80 33       	cpi	r24, 0x30	; 48
    303a:	09 f0       	breq	.+2      	; 0x303e <option_voidChooseOptione+0x25c>
    303c:	95 c0       	rjmp	.+298    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,master_pinair,DIO_u8PIN_LOW);
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	64 e0       	ldi	r22, 0x04	; 4
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    3048:	8f c0       	rjmp	.+286    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						break;
					case living :
						USART_u8SendString("\n1-ON   0-Off");
    304a:	8f e4       	ldi	r24, 0x4F	; 79
    304c:	91 e0       	ldi	r25, 0x01	; 1
    304e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    3052:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    3056:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    3058:	89 81       	ldd	r24, Y+1	; 0x01
    305a:	81 33       	cpi	r24, 0x31	; 49
    305c:	31 f4       	brne	.+12     	; 0x306a <option_voidChooseOptione+0x288>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,living_pinair,DIO_u8PIN_HIGH);
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	65 e0       	ldi	r22, 0x05	; 5
    3062:	41 e0       	ldi	r20, 0x01	; 1
    3064:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    3068:	7f c0       	rjmp	.+254    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	80 33       	cpi	r24, 0x30	; 48
    306e:	09 f0       	breq	.+2      	; 0x3072 <option_voidChooseOptione+0x290>
    3070:	7b c0       	rjmp	.+246    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,living_pinair,DIO_u8PIN_LOW);
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	65 e0       	ldi	r22, 0x05	; 5
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    307c:	75 c0       	rjmp	.+234    	; 0x3168 <option_voidChooseOptione+0x386>
						}break;
					case bathroom:
						USART_u8SendString("\n1-ON   0-Off");
    307e:	8f e4       	ldi	r24, 0x4F	; 79
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    3086:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    308a:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	81 33       	cpi	r24, 0x31	; 49
    3090:	31 f4       	brne	.+12     	; 0x309e <option_voidChooseOptione+0x2bc>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,bathroom_pinair,DIO_u8PIN_HIGH);
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	67 e0       	ldi	r22, 0x07	; 7
    3096:	41 e0       	ldi	r20, 0x01	; 1
    3098:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    309c:	65 c0       	rjmp	.+202    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	80 33       	cpi	r24, 0x30	; 48
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <option_voidChooseOptione+0x2c4>
    30a4:	61 c0       	rjmp	.+194    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,bathroom_pinair,DIO_u8PIN_LOW);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	67 e0       	ldi	r22, 0x07	; 7
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    30b0:	5b c0       	rjmp	.+182    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						break;
					case kithen:
						USART_u8SendString("\n1-ON   0-Off");
    30b2:	8f e4       	ldi	r24, 0x4F	; 79
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
						Local_u8ResevedVal = USART_u8Receive();
    30ba:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    30be:	89 83       	std	Y+1, r24	; 0x01
						/*on*/if(Local_u8ResevedVal == on)
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	81 33       	cpi	r24, 0x31	; 49
    30c4:	31 f4       	brne	.+12     	; 0x30d2 <option_voidChooseOptione+0x2f0>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,kithn_pinair,DIO_u8PIN_HIGH);
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	66 e0       	ldi	r22, 0x06	; 6
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    30d0:	4b c0       	rjmp	.+150    	; 0x3168 <option_voidChooseOptione+0x386>
						}
						/*off*/else if(Local_u8ResevedVal==off)
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	80 33       	cpi	r24, 0x30	; 48
    30d6:	09 f0       	breq	.+2      	; 0x30da <option_voidChooseOptione+0x2f8>
    30d8:	47 c0       	rjmp	.+142    	; 0x3168 <option_voidChooseOptione+0x386>
						{
							DIO_VoidSetPinValue(airligtingsystem_port,kithn_pinair,DIO_u8PIN_LOW);
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	66 e0       	ldi	r22, 0x06	; 6
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_VoidSetPinValue>
    30e4:	41 c0       	rjmp	.+130    	; 0x3168 <option_voidChooseOptione+0x386>
					case MainOpionts:
						break;
				}
				break;
			case option3:
				USART_u8SendString("\nOptions : ");
    30e6:	85 e8       	ldi	r24, 0x85	; 133
    30e8:	91 e0       	ldi	r25, 0x01	; 1
    30ea:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("1-Open   0-Close");
    30ee:	81 e9       	ldi	r24, 0x91	; 145
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				USART_u8SendString("\nEnter the state:");
    30f6:	82 ea       	ldi	r24, 0xA2	; 162
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				Local_u8ResevedVal = USART_u8Receive();
    30fe:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    3102:	89 83       	std	Y+1, r24	; 0x01
				/*open*/if(Local_u8ResevedVal == on)
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	81 33       	cpi	r24, 0x31	; 49
    3108:	39 f4       	brne	.+14     	; 0x3118 <option_voidChooseOptione+0x336>
				{
					DOOR_voidOpenDoor();
    310a:	0e 94 20 1a 	call	0x3440	; 0x3440 <DOOR_voidOpenDoor>
					USART_u8SendString("\nThe door is opened now");
    310e:	84 eb       	ldi	r24, 0xB4	; 180
    3110:	91 e0       	ldi	r25, 0x01	; 1
    3112:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
    3116:	28 c0       	rjmp	.+80     	; 0x3168 <option_voidChooseOptione+0x386>
				}
				/*Close*/else if(Local_u8ResevedVal==off)
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	80 33       	cpi	r24, 0x30	; 48
    311c:	29 f5       	brne	.+74     	; 0x3168 <option_voidChooseOptione+0x386>
				{
					DOOR_voidCloseDoor();
    311e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <DOOR_voidCloseDoor>
					USART_u8SendString("\nThe door is closed now");
    3122:	8c ec       	ldi	r24, 0xCC	; 204
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
    312a:	1e c0       	rjmp	.+60     	; 0x3168 <option_voidChooseOptione+0x386>
				}
				break;
			case option4:
				USART_u8SendString("\nEnter the user number form 0 to 9 :");
    312c:	84 ee       	ldi	r24, 0xE4	; 228
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				Local_u8ResevedVal = USART_u8Receive()-'0';
    3134:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <USART_u8Receive>
    3138:	80 53       	subi	r24, 0x30	; 48
    313a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8ResevedVal<=9)
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	8a 30       	cpi	r24, 0x0A	; 10
    3140:	78 f4       	brcc	.+30     	; 0x3160 <option_voidChooseOptione+0x37e>
				{
					USART_u8SendString("\nEnter the new name :");
    3142:	89 e0       	ldi	r24, 0x09	; 9
    3144:	92 e0       	ldi	r25, 0x02	; 2
    3146:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
					APP_voidReseveUserNameAndWrite(Local_u8ResevedVal);
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	0e 94 0b 07 	call	0xe16	; 0xe16 <APP_voidReseveUserNameAndWrite>
					USART_u8SendString("\nEnter the new Password :");
    3150:	8f e1       	ldi	r24, 0x1F	; 31
    3152:	92 e0       	ldi	r25, 0x02	; 2
    3154:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
					APP_voidReseverUserPassAndWrite(Local_u8ResevedVal);
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <APP_voidReseverUserPassAndWrite>
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <option_voidChooseOptione+0x386>
				}
				else
				{
					USART_u8SendString("\nInvalid user number :");
    3160:	89 e3       	ldi	r24, 0x39	; 57
    3162:	92 e0       	ldi	r25, 0x02	; 2
    3164:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
				}
				break;
			case option5:
				break;
		}
	}while(Local_u8option != option5);
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	85 33       	cpi	r24, 0x35	; 53
    316c:	09 f0       	breq	.+2      	; 0x3170 <option_voidChooseOptione+0x38e>
    316e:	45 ce       	rjmp	.-886    	; 0x2dfa <option_voidChooseOptione+0x18>
}
    3170:	29 96       	adiw	r28, 0x09	; 9
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <option_voidoptionInit>:
void option_voidoptionInit(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidSetPinDirection(airligtingsystem_port,master_pinLight,DIO_u8PIN_OUTPUT);
    318a:	82 e0       	ldi	r24, 0x02	; 2
    318c:	60 e0       	ldi	r22, 0x00	; 0
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,living_pinLight,DIO_u8PIN_OUTPUT);
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,kithn_pinLight,DIO_u8PIN_OUTPUT);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	62 e0       	ldi	r22, 0x02	; 2
    31a2:	41 e0       	ldi	r20, 0x01	; 1
    31a4:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,bathroom_pinLight,DIO_u8PIN_OUTPUT);
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	63 e0       	ldi	r22, 0x03	; 3
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,master_pinair,DIO_u8PIN_OUTPUT);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	64 e0       	ldi	r22, 0x04	; 4
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,living_pinair,DIO_u8PIN_OUTPUT);
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	65 e0       	ldi	r22, 0x05	; 5
    31c0:	41 e0       	ldi	r20, 0x01	; 1
    31c2:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,kithn_pinair,DIO_u8PIN_OUTPUT);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	66 e0       	ldi	r22, 0x06	; 6
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(airligtingsystem_port,bathroom_pinair,DIO_u8PIN_OUTPUT);
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	67 e0       	ldi	r22, 0x07	; 7
    31d4:	41 e0       	ldi	r20, 0x01	; 1
    31d6:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
	DOOR_voidDOORInit();
    31da:	0e 94 0e 1a 	call	0x341c	; 0x341c <DOOR_voidDOORInit>
	DOOR_voidOpenDoor();/*Initial the door state*/
    31de:	0e 94 20 1a 	call	0x3440	; 0x3440 <DOOR_voidOpenDoor>
}
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <main>:
#include "USART_interface.h"
#include "GIE_interface.h"
#include "APPuser_interface.h"
#include "app2_interface.h"
int main()
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	62 97       	sbiw	r28, 0x12	; 18
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61
    u8 i;

    APP_userNumber_t User_Number=0;
    31fc:	1a 8a       	std	Y+18, r1	; 0x12
    u8 PassTrys=0;
    31fe:	18 8a       	std	Y+16, r1	; 0x10
    APP_PassStaute_t Pass_State=0;
    3200:	1f 86       	std	Y+15, r1	; 0x0f
    /*pin rx input*/
    Dio_SetPinMode(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT_FLOATING);
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	41 e0       	ldi	r20, 0x01	; 1
    3208:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    /*pin Tx output*/
    Dio_SetPinMode(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
    320c:	83 e0       	ldi	r24, 0x03	; 3
    320e:	61 e0       	ldi	r22, 0x01	; 1
    3210:	40 e0       	ldi	r20, 0x00	; 0
    3212:	0e 94 b5 0b 	call	0x176a	; 0x176a <Dio_SetPinMode>
    /*intion usart*/
    USART_voidInit();
    3216:	0e 94 88 16 	call	0x2d10	; 0x2d10 <USART_voidInit>
    if ('W'!=eeprom_read_byte(250))
    321a:	8a ef       	ldi	r24, 0xFA	; 250
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__eerd_byte_m32>
    3222:	87 35       	cpi	r24, 0x57	; 87
    3224:	49 f0       	breq	.+18     	; 0x3238 <main+0x50>
    {
    	/*eeprom not initialized*/
        eeprom_write_byte(250,'W');
    3226:	8a ef       	ldi	r24, 0xFA	; 250
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	67 e5       	ldi	r22, 0x57	; 87
    322c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__eewr_byte_m32>
        APP_voidAllPassesInit();
    3230:	0e 94 a9 07 	call	0xf52	; 0xf52 <APP_voidAllPassesInit>
        APP_voidAllUserNamesInit();
    3234:	0e 94 2b 08 	call	0x1056	; 0x1056 <APP_voidAllUserNamesInit>
    }

    option_voidoptionInit();
    3238:	0e 94 c1 18 	call	0x3182	; 0x3182 <option_voidoptionInit>

    Lcd_Init();
    323c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <Lcd_Init>


    while (1)
    {
    	Lcd_DisplayClear();
    3240:	0e 94 8e 11 	call	0x231c	; 0x231c <Lcd_DisplayClear>
        Lcd_DisplayString((u8*)"Welcome");
    3244:	80 e5       	ldi	r24, 0x50	; 80
    3246:	92 e0       	ldi	r25, 0x02	; 2
    3248:	0e 94 a5 11 	call	0x234a	; 0x234a <Lcd_DisplayString>
    	PassTrys=0;
    324c:	18 8a       	std	Y+16, r1	; 0x10
    	/*Take user name and password*/
        do
        {
            if (PassTrys!=0)
    324e:	88 89       	ldd	r24, Y+16	; 0x10
    3250:	88 23       	and	r24, r24
    3252:	99 f0       	breq	.+38     	; 0x327a <main+0x92>
            { 
                USART_u8SendString((u8*)"\nWrong try again");
    3254:	88 e5       	ldi	r24, 0x58	; 88
    3256:	92 e0       	ldi	r25, 0x02	; 2
    3258:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
                USART_u8SendString((u8*)"\nremine :");
    325c:	89 e6       	ldi	r24, 0x69	; 105
    325e:	92 e0       	ldi	r25, 0x02	; 2
    3260:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
                USART_voidSendData(3-PassTrys+'0');
    3264:	93 e3       	ldi	r25, 0x33	; 51
    3266:	88 89       	ldd	r24, Y+16	; 0x10
    3268:	29 2f       	mov	r18, r25
    326a:	28 1b       	sub	r18, r24
    326c:	82 2f       	mov	r24, r18
    326e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <USART_voidSendData>
                USART_u8SendString((u8*)" Trys");
    3272:	83 e7       	ldi	r24, 0x73	; 115
    3274:	92 e0       	ldi	r25, 0x02	; 2
    3276:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
            }
            USART_u8SendString((u8*)"\nEnter user name:");
    327a:	89 e7       	ldi	r24, 0x79	; 121
    327c:	92 e0       	ldi	r25, 0x02	; 2
    327e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
            Pass_State = APP1_u8ReseveNameAndCheck(&User_Number);
    3282:	ce 01       	movw	r24, r28
    3284:	42 96       	adiw	r24, 0x12	; 18
    3286:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP1_u8ReseveNameAndCheck>
    328a:	8f 87       	std	Y+15, r24	; 0x0f
            if (Pass_State==PASS_IS_CORRECT)
    328c:	8f 85       	ldd	r24, Y+15	; 0x0f
    328e:	81 30       	cpi	r24, 0x01	; 1
    3290:	41 f4       	brne	.+16     	; 0x32a2 <main+0xba>
            {
                USART_u8SendString((u8*)"\nEnter the password:");
    3292:	8b e8       	ldi	r24, 0x8B	; 139
    3294:	92 e0       	ldi	r25, 0x02	; 2
    3296:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
                Pass_State = APP_u8ReseveUserPasswordAndCheck(User_Number);
    329a:	8a 89       	ldd	r24, Y+18	; 0x12
    329c:	0e 94 9a 06 	call	0xd34	; 0xd34 <APP_u8ReseveUserPasswordAndCheck>
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
            }
            PassTrys++;
    32a2:	88 89       	ldd	r24, Y+16	; 0x10
    32a4:	8f 5f       	subi	r24, 0xFF	; 255
    32a6:	88 8b       	std	Y+16, r24	; 0x10
        }while((PassTrys<3)&&(Pass_State!=PASS_IS_CORRECT));
    32a8:	88 89       	ldd	r24, Y+16	; 0x10
    32aa:	83 30       	cpi	r24, 0x03	; 3
    32ac:	18 f4       	brcc	.+6      	; 0x32b4 <main+0xcc>
    32ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b0:	81 30       	cpi	r24, 0x01	; 1
    32b2:	69 f6       	brne	.-102    	; 0x324e <main+0x66>
        /*Options*/
        if (Pass_State==PASS_IS_CORRECT)
    32b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	49 f4       	brne	.+18     	; 0x32cc <main+0xe4>
        {
        	Lcd_DisplayClear();
    32ba:	0e 94 8e 11 	call	0x231c	; 0x231c <Lcd_DisplayClear>
        	Lcd_DisplayString((u8*)"correct pass");
    32be:	80 ea       	ldi	r24, 0xA0	; 160
    32c0:	92 e0       	ldi	r25, 0x02	; 2
    32c2:	0e 94 a5 11 	call	0x234a	; 0x234a <Lcd_DisplayString>
            option_voidChooseOptione();
    32c6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <option_voidChooseOptione>
    32ca:	ba cf       	rjmp	.-140    	; 0x3240 <main+0x58>
        }
        else
        {
            for ( i = 0; i < 1000; i++)
    32cc:	19 8a       	std	Y+17, r1	; 0x11
            {
                USART_u8SendString((u8*)"wait remain");
    32ce:	8d ea       	ldi	r24, 0xAD	; 173
    32d0:	92 e0       	ldi	r25, 0x02	; 2
    32d2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
                if (i>=100)
    32d6:	89 89       	ldd	r24, Y+17	; 0x11
    32d8:	84 36       	cpi	r24, 0x64	; 100
    32da:	40 f0       	brcs	.+16     	; 0x32ec <main+0x104>
                {
                    USART_voidSendData((i/100)+'0');
    32dc:	89 89       	ldd	r24, Y+17	; 0x11
    32de:	94 e6       	ldi	r25, 0x64	; 100
    32e0:	69 2f       	mov	r22, r25
    32e2:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodqi4>
    32e6:	80 5d       	subi	r24, 0xD0	; 208
    32e8:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <USART_voidSendData>
                }
                if (i>=10)
    32ec:	89 89       	ldd	r24, Y+17	; 0x11
    32ee:	8a 30       	cpi	r24, 0x0A	; 10
    32f0:	68 f0       	brcs	.+26     	; 0x330c <main+0x124>
                {
                    USART_voidSendData(((i%100)/10)+'0');
    32f2:	89 89       	ldd	r24, Y+17	; 0x11
    32f4:	94 e6       	ldi	r25, 0x64	; 100
    32f6:	69 2f       	mov	r22, r25
    32f8:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodqi4>
    32fc:	89 2f       	mov	r24, r25
    32fe:	9a e0       	ldi	r25, 0x0A	; 10
    3300:	69 2f       	mov	r22, r25
    3302:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodqi4>
    3306:	80 5d       	subi	r24, 0xD0	; 208
    3308:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <USART_voidSendData>
                }
                USART_voidSendData(((i%100)%10)+'0');
    330c:	89 89       	ldd	r24, Y+17	; 0x11
    330e:	94 e6       	ldi	r25, 0x64	; 100
    3310:	69 2f       	mov	r22, r25
    3312:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodqi4>
    3316:	89 2f       	mov	r24, r25
    3318:	9a e0       	ldi	r25, 0x0A	; 10
    331a:	69 2f       	mov	r22, r25
    331c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodqi4>
    3320:	89 2f       	mov	r24, r25
    3322:	80 5d       	subi	r24, 0xD0	; 208
    3324:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <USART_voidSendData>
                USART_u8SendString((u8*)"for 1000");
    3328:	89 eb       	ldi	r24, 0xB9	; 185
    332a:	92 e0       	ldi	r25, 0x02	; 2
    332c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART_u8SendString>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	aa e7       	ldi	r26, 0x7A	; 122
    3336:	b4 e4       	ldi	r27, 0x44	; 68
    3338:	8b 87       	std	Y+11, r24	; 0x0b
    333a:	9c 87       	std	Y+12, r25	; 0x0c
    333c:	ad 87       	std	Y+13, r26	; 0x0d
    333e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8f 83       	std	Y+7, r24	; 0x07
    335a:	98 87       	std	Y+8, r25	; 0x08
    335c:	a9 87       	std	Y+9, r26	; 0x09
    335e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <main+0x19a>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <main+0x218>
	else if (__tmp > 65535)
    3382:	6f 81       	ldd	r22, Y+7	; 0x07
    3384:	78 85       	ldd	r23, Y+8	; 0x08
    3386:	89 85       	ldd	r24, Y+9	; 0x09
    3388:	9a 85       	ldd	r25, Y+10	; 0x0a
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <main+0x1fa>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9c 83       	std	Y+4, r25	; 0x04
    33ca:	8b 83       	std	Y+3, r24	; 0x03
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	9c 81       	ldd	r25, Y+4	; 0x04
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <main+0x1e8>
    33d4:	9c 83       	std	Y+4, r25	; 0x04
    33d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <main+0x1dc>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6f 81       	ldd	r22, Y+7	; 0x07
    33ee:	78 85       	ldd	r23, Y+8	; 0x08
    33f0:	89 85       	ldd	r24, Y+9	; 0x09
    33f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	8d 81       	ldd	r24, Y+5	; 0x05
    3402:	9e 81       	ldd	r25, Y+6	; 0x06
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	9a 81       	ldd	r25, Y+2	; 0x02
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <main+0x224>
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
        	Lcd_DisplayString((u8*)"correct pass");
            option_voidChooseOptione();
        }
        else
        {
            for ( i = 0; i < 1000; i++)
    3414:	89 89       	ldd	r24, Y+17	; 0x11
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	89 8b       	std	Y+17, r24	; 0x11
    341a:	59 cf       	rjmp	.-334    	; 0x32ce <main+0xe6>

0000341c <DOOR_voidDOORInit>:
#include "smart_door_config.h"
#include "smart_door_interface.h"
#include "smart_door_private.h"

void DOOR_voidDOORInit(void)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit();
    3424:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER1_voidInit>
	/*fixed top value to give u 20ms periodic time */
	TIMER1_voidSetTopVal(20000);
    3428:	80 e2       	ldi	r24, 0x20	; 32
    342a:	9e e4       	ldi	r25, 0x4E	; 78
    342c:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <TIMER1_voidSetTopVal>
	DIO_VoidSetPinDirection(DOOR_PORT,DOOR_PIN,DIO_u8PIN_OUTPUT);
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	41 e0       	ldi	r20, 0x01	; 1
    3436:	0e 94 b1 08 	call	0x1162	; 0x1162 <DIO_VoidSetPinDirection>
}
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	08 95       	ret

00003440 <DOOR_voidOpenDoor>:
void DOOR_voidOpenDoor(void)
{
    3440:	df 93       	push	r29
    3442:	cf 93       	push	r28
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62

	TIMER1_voidSetCompareMatchVal(open);
    3448:	80 ed       	ldi	r24, 0xD0	; 208
    344a:	97 e0       	ldi	r25, 0x07	; 7
    344c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TIMER1_voidSetCompareMatchVal>
}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <DOOR_voidCloseDoor>:

void DOOR_voidCloseDoor(void)
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62

	TIMER1_voidSetCompareMatchVal(close);
    345e:	88 ee       	ldi	r24, 0xE8	; 232
    3460:	93 e0       	ldi	r25, 0x03	; 3
    3462:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <TIMER1_voidSetCompareMatchVal>

}
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	08 95       	ret

0000346c <__mulsi3>:
    346c:	62 9f       	mul	r22, r18
    346e:	d0 01       	movw	r26, r0
    3470:	73 9f       	mul	r23, r19
    3472:	f0 01       	movw	r30, r0
    3474:	82 9f       	mul	r24, r18
    3476:	e0 0d       	add	r30, r0
    3478:	f1 1d       	adc	r31, r1
    347a:	64 9f       	mul	r22, r20
    347c:	e0 0d       	add	r30, r0
    347e:	f1 1d       	adc	r31, r1
    3480:	92 9f       	mul	r25, r18
    3482:	f0 0d       	add	r31, r0
    3484:	83 9f       	mul	r24, r19
    3486:	f0 0d       	add	r31, r0
    3488:	74 9f       	mul	r23, r20
    348a:	f0 0d       	add	r31, r0
    348c:	65 9f       	mul	r22, r21
    348e:	f0 0d       	add	r31, r0
    3490:	99 27       	eor	r25, r25
    3492:	72 9f       	mul	r23, r18
    3494:	b0 0d       	add	r27, r0
    3496:	e1 1d       	adc	r30, r1
    3498:	f9 1f       	adc	r31, r25
    349a:	63 9f       	mul	r22, r19
    349c:	b0 0d       	add	r27, r0
    349e:	e1 1d       	adc	r30, r1
    34a0:	f9 1f       	adc	r31, r25
    34a2:	bd 01       	movw	r22, r26
    34a4:	cf 01       	movw	r24, r30
    34a6:	11 24       	eor	r1, r1
    34a8:	08 95       	ret

000034aa <__udivmodqi4>:
    34aa:	99 1b       	sub	r25, r25
    34ac:	79 e0       	ldi	r23, 0x09	; 9
    34ae:	04 c0       	rjmp	.+8      	; 0x34b8 <__udivmodqi4_ep>

000034b0 <__udivmodqi4_loop>:
    34b0:	99 1f       	adc	r25, r25
    34b2:	96 17       	cp	r25, r22
    34b4:	08 f0       	brcs	.+2      	; 0x34b8 <__udivmodqi4_ep>
    34b6:	96 1b       	sub	r25, r22

000034b8 <__udivmodqi4_ep>:
    34b8:	88 1f       	adc	r24, r24
    34ba:	7a 95       	dec	r23
    34bc:	c9 f7       	brne	.-14     	; 0x34b0 <__udivmodqi4_loop>
    34be:	80 95       	com	r24
    34c0:	08 95       	ret

000034c2 <__udivmodsi4>:
    34c2:	a1 e2       	ldi	r26, 0x21	; 33
    34c4:	1a 2e       	mov	r1, r26
    34c6:	aa 1b       	sub	r26, r26
    34c8:	bb 1b       	sub	r27, r27
    34ca:	fd 01       	movw	r30, r26
    34cc:	0d c0       	rjmp	.+26     	; 0x34e8 <__udivmodsi4_ep>

000034ce <__udivmodsi4_loop>:
    34ce:	aa 1f       	adc	r26, r26
    34d0:	bb 1f       	adc	r27, r27
    34d2:	ee 1f       	adc	r30, r30
    34d4:	ff 1f       	adc	r31, r31
    34d6:	a2 17       	cp	r26, r18
    34d8:	b3 07       	cpc	r27, r19
    34da:	e4 07       	cpc	r30, r20
    34dc:	f5 07       	cpc	r31, r21
    34de:	20 f0       	brcs	.+8      	; 0x34e8 <__udivmodsi4_ep>
    34e0:	a2 1b       	sub	r26, r18
    34e2:	b3 0b       	sbc	r27, r19
    34e4:	e4 0b       	sbc	r30, r20
    34e6:	f5 0b       	sbc	r31, r21

000034e8 <__udivmodsi4_ep>:
    34e8:	66 1f       	adc	r22, r22
    34ea:	77 1f       	adc	r23, r23
    34ec:	88 1f       	adc	r24, r24
    34ee:	99 1f       	adc	r25, r25
    34f0:	1a 94       	dec	r1
    34f2:	69 f7       	brne	.-38     	; 0x34ce <__udivmodsi4_loop>
    34f4:	60 95       	com	r22
    34f6:	70 95       	com	r23
    34f8:	80 95       	com	r24
    34fa:	90 95       	com	r25
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	bd 01       	movw	r22, r26
    3502:	cf 01       	movw	r24, r30
    3504:	08 95       	ret

00003506 <__divmodsi4>:
    3506:	97 fb       	bst	r25, 7
    3508:	09 2e       	mov	r0, r25
    350a:	05 26       	eor	r0, r21
    350c:	0e d0       	rcall	.+28     	; 0x352a <__divmodsi4_neg1>
    350e:	57 fd       	sbrc	r21, 7
    3510:	04 d0       	rcall	.+8      	; 0x351a <__divmodsi4_neg2>
    3512:	d7 df       	rcall	.-82     	; 0x34c2 <__udivmodsi4>
    3514:	0a d0       	rcall	.+20     	; 0x352a <__divmodsi4_neg1>
    3516:	00 1c       	adc	r0, r0
    3518:	38 f4       	brcc	.+14     	; 0x3528 <__divmodsi4_exit>

0000351a <__divmodsi4_neg2>:
    351a:	50 95       	com	r21
    351c:	40 95       	com	r20
    351e:	30 95       	com	r19
    3520:	21 95       	neg	r18
    3522:	3f 4f       	sbci	r19, 0xFF	; 255
    3524:	4f 4f       	sbci	r20, 0xFF	; 255
    3526:	5f 4f       	sbci	r21, 0xFF	; 255

00003528 <__divmodsi4_exit>:
    3528:	08 95       	ret

0000352a <__divmodsi4_neg1>:
    352a:	f6 f7       	brtc	.-4      	; 0x3528 <__divmodsi4_exit>
    352c:	90 95       	com	r25
    352e:	80 95       	com	r24
    3530:	70 95       	com	r23
    3532:	61 95       	neg	r22
    3534:	7f 4f       	sbci	r23, 0xFF	; 255
    3536:	8f 4f       	sbci	r24, 0xFF	; 255
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	08 95       	ret

0000353c <__prologue_saves__>:
    353c:	2f 92       	push	r2
    353e:	3f 92       	push	r3
    3540:	4f 92       	push	r4
    3542:	5f 92       	push	r5
    3544:	6f 92       	push	r6
    3546:	7f 92       	push	r7
    3548:	8f 92       	push	r8
    354a:	9f 92       	push	r9
    354c:	af 92       	push	r10
    354e:	bf 92       	push	r11
    3550:	cf 92       	push	r12
    3552:	df 92       	push	r13
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	ca 1b       	sub	r28, r26
    3566:	db 0b       	sbc	r29, r27
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	09 94       	ijmp

00003574 <__epilogue_restores__>:
    3574:	2a 88       	ldd	r2, Y+18	; 0x12
    3576:	39 88       	ldd	r3, Y+17	; 0x11
    3578:	48 88       	ldd	r4, Y+16	; 0x10
    357a:	5f 84       	ldd	r5, Y+15	; 0x0f
    357c:	6e 84       	ldd	r6, Y+14	; 0x0e
    357e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3580:	8c 84       	ldd	r8, Y+12	; 0x0c
    3582:	9b 84       	ldd	r9, Y+11	; 0x0b
    3584:	aa 84       	ldd	r10, Y+10	; 0x0a
    3586:	b9 84       	ldd	r11, Y+9	; 0x09
    3588:	c8 84       	ldd	r12, Y+8	; 0x08
    358a:	df 80       	ldd	r13, Y+7	; 0x07
    358c:	ee 80       	ldd	r14, Y+6	; 0x06
    358e:	fd 80       	ldd	r15, Y+5	; 0x05
    3590:	0c 81       	ldd	r16, Y+4	; 0x04
    3592:	1b 81       	ldd	r17, Y+3	; 0x03
    3594:	aa 81       	ldd	r26, Y+2	; 0x02
    3596:	b9 81       	ldd	r27, Y+1	; 0x01
    3598:	ce 0f       	add	r28, r30
    359a:	d1 1d       	adc	r29, r1
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	ed 01       	movw	r28, r26
    35a8:	08 95       	ret

000035aa <__eerd_byte_m32>:
    35aa:	e1 99       	sbic	0x1c, 1	; 28
    35ac:	fe cf       	rjmp	.-4      	; 0x35aa <__eerd_byte_m32>
    35ae:	9f bb       	out	0x1f, r25	; 31
    35b0:	8e bb       	out	0x1e, r24	; 30
    35b2:	e0 9a       	sbi	0x1c, 0	; 28
    35b4:	99 27       	eor	r25, r25
    35b6:	8d b3       	in	r24, 0x1d	; 29
    35b8:	08 95       	ret

000035ba <__eewr_byte_m32>:
    35ba:	26 2f       	mov	r18, r22

000035bc <__eewr_r18_m32>:
    35bc:	e1 99       	sbic	0x1c, 1	; 28
    35be:	fe cf       	rjmp	.-4      	; 0x35bc <__eewr_r18_m32>
    35c0:	9f bb       	out	0x1f, r25	; 31
    35c2:	8e bb       	out	0x1e, r24	; 30
    35c4:	2d bb       	out	0x1d, r18	; 29
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	e2 9a       	sbi	0x1c, 2	; 28
    35cc:	e1 9a       	sbi	0x1c, 1	; 28
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	01 96       	adiw	r24, 0x01	; 1
    35d2:	08 95       	ret

000035d4 <_exit>:
    35d4:	f8 94       	cli

000035d6 <__stop_program>:
    35d6:	ff cf       	rjmp	.-2      	; 0x35d6 <__stop_program>
